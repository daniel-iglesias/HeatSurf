<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="lmx__mat__vector_8h" kind="file">
    <compoundname>lmx_mat_vector.h</compoundname>
    <includes refid="lmx__mat__elem__ref_8h" local="yes">lmx_mat_elem_ref.h</includes>
    <includes refid="lmx__mat__type__stdvector_8h" local="yes">lmx_mat_type_stdvector.h</includes>
    <includedby refid="lmx__mat__type__stdmatrix_8h" local="yes">src/LMX/lmx_mat_type_stdmatrix.h</includedby>
    <includedby refid="lmx__linsolvers__cg_8h" local="yes">src/LMX/lmx_linsolvers_cg.h</includedby>
    <incdepgraph>
      <node id="4479">
        <label>lmx_mat_type_stdvector.h</label>
        <link refid="lmx__mat__type__stdvector_8h"/>
        <childnode refid="4480" relation="include">
        </childnode>
        <childnode refid="4481" relation="include">
        </childnode>
        <childnode refid="4482" relation="include">
        </childnode>
        <childnode refid="4483" relation="include">
        </childnode>
        <childnode refid="4484" relation="include">
        </childnode>
        <childnode refid="4485" relation="include">
        </childnode>
      </node>
      <node id="4480">
        <label>fstream</label>
      </node>
      <node id="4485">
        <label>lmx_mat_data_vec.h</label>
        <link refid="lmx__mat__data__vec_8h"/>
        <childnode refid="4476" relation="include">
        </childnode>
      </node>
      <node id="4477">
        <label>lmx_mat_data_blas.h</label>
        <link refid="lmx__mat__data__blas_8h"/>
        <childnode refid="4478" relation="include">
        </childnode>
      </node>
      <node id="4474">
        <label>src/LMX/lmx_mat_vector.h</label>
        <link refid="lmx_mat_vector.h"/>
        <childnode refid="4475" relation="include">
        </childnode>
        <childnode refid="4479" relation="include">
        </childnode>
      </node>
      <node id="4484">
        <label>string.h</label>
      </node>
      <node id="4476">
        <label>lmx_mat_data.h</label>
        <link refid="lmx__mat__data_8h"/>
        <childnode refid="4477" relation="include">
        </childnode>
      </node>
      <node id="4483">
        <label>vector</label>
      </node>
      <node id="4482">
        <label>cstdlib</label>
      </node>
      <node id="4481">
        <label>iostream</label>
      </node>
      <node id="4478">
        <label>algorithm</label>
      </node>
      <node id="4475">
        <label>lmx_mat_elem_ref.h</label>
        <link refid="lmx__mat__elem__ref_8h"/>
        <childnode refid="4476" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4502">
        <label>src/cone2.cpp</label>
        <link refid="cone2_8cpp"/>
      </node>
      <node id="4510">
        <label>src/ring.h</label>
        <link refid="ring_8h"/>
        <childnode refid="4511" relation="include">
        </childnode>
      </node>
      <node id="4504">
        <label>src/cylinder.cpp</label>
        <link refid="cylinder_8cpp"/>
      </node>
      <node id="4505">
        <label>src/geometry.cpp</label>
        <link refid="geometry_8cpp"/>
      </node>
      <node id="4486">
        <label>src/LMX/lmx_mat_vector.h</label>
        <link refid="lmx_mat_vector.h"/>
        <childnode refid="4487" relation="include">
        </childnode>
        <childnode refid="4512" relation="include">
        </childnode>
      </node>
      <node id="4499">
        <label>src/simulation.cpp</label>
        <link refid="simulation_8cpp"/>
      </node>
      <node id="4492">
        <label>src/LMX/lmx.h</label>
        <link refid="lmx_8h"/>
        <childnode refid="4493" relation="include">
        </childnode>
      </node>
      <node id="4507">
        <label>src/ogive.cpp</label>
        <link refid="ogive_8cpp"/>
      </node>
      <node id="4512">
        <label>src/LMX/lmx_linsolvers_cg.h</label>
        <link refid="lmx__linsolvers__cg_8h"/>
        <childnode refid="4490" relation="include">
        </childnode>
      </node>
      <node id="4494">
        <label>src/cone.h</label>
        <link refid="cone_8h"/>
        <childnode refid="4495" relation="include">
        </childnode>
        <childnode refid="4496" relation="include">
        </childnode>
        <childnode refid="4497" relation="include">
        </childnode>
      </node>
      <node id="4490">
        <label>src/LMX/lmx_linsolvers_system.h</label>
        <link refid="lmx__linsolvers__system_8h"/>
        <childnode refid="4491" relation="include">
        </childnode>
      </node>
      <node id="4500">
        <label>src/cone2.h</label>
        <link refid="cone2_8h"/>
        <childnode refid="4501" relation="include">
        </childnode>
        <childnode refid="4502" relation="include">
        </childnode>
        <childnode refid="4497" relation="include">
        </childnode>
      </node>
      <node id="4495">
        <label>src/cone.cpp</label>
        <link refid="cone_8cpp"/>
      </node>
      <node id="4503">
        <label>src/cylinder.h</label>
        <link refid="cylinder_8h"/>
        <childnode refid="4504" relation="include">
        </childnode>
        <childnode refid="4497" relation="include">
        </childnode>
      </node>
      <node id="4509">
        <label>src/twoplates.cpp</label>
        <link refid="twoplates_8cpp"/>
      </node>
      <node id="4498">
        <label>src/heatsurf.cpp</label>
        <link refid="heatsurf_8cpp"/>
      </node>
      <node id="4506">
        <label>src/ogive.h</label>
        <link refid="ogive_8h"/>
        <childnode refid="4497" relation="include">
        </childnode>
        <childnode refid="4507" relation="include">
        </childnode>
      </node>
      <node id="4489">
        <label>src/LMX/lmx_mat_dense_matrix.h</label>
        <link refid="lmx__mat__dense__matrix_8h"/>
        <childnode refid="4490" relation="include">
        </childnode>
      </node>
      <node id="4511">
        <label>src/ring.cpp</label>
        <link refid="ring_8cpp"/>
      </node>
      <node id="4501">
        <label>src/cone2-bak.cpp</label>
        <link refid="cone2-bak_8cpp"/>
      </node>
      <node id="4496">
        <label>src/cone2-bak.h</label>
        <link refid="cone2-bak_8h"/>
      </node>
      <node id="4493">
        <label>src/geometry.h</label>
        <link refid="geometry_8h"/>
        <childnode refid="4494" relation="include">
        </childnode>
        <childnode refid="4500" relation="include">
        </childnode>
        <childnode refid="4503" relation="include">
        </childnode>
        <childnode refid="4505" relation="include">
        </childnode>
        <childnode refid="4506" relation="include">
        </childnode>
        <childnode refid="4508" relation="include">
        </childnode>
        <childnode refid="4510" relation="include">
        </childnode>
      </node>
      <node id="4508">
        <label>src/twoplates.h</label>
        <link refid="twoplates_8h"/>
        <childnode refid="4497" relation="include">
        </childnode>
        <childnode refid="4509" relation="include">
        </childnode>
      </node>
      <node id="4497">
        <label>src/simulation.h</label>
        <link refid="simulation_8h"/>
        <childnode refid="4498" relation="include">
        </childnode>
        <childnode refid="4499" relation="include">
        </childnode>
      </node>
      <node id="4487">
        <label>src/LMX/lmx_mat_type_stdmatrix.h</label>
        <link refid="lmx__mat__type__stdmatrix_8h"/>
        <childnode refid="4488" relation="include">
        </childnode>
      </node>
      <node id="4491">
        <label>src/LMX/lmx_linsolvers.h</label>
        <link refid="lmx__linsolvers_8h"/>
        <childnode refid="4492" relation="include">
        </childnode>
      </node>
      <node id="4488">
        <label>src/LMX/lmx_mat_matrix.h</label>
        <link refid="lmx__mat__matrix_8h"/>
        <childnode refid="4489" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classlmx_1_1Matrix" prot="public">lmx::Matrix</innerclass>
    <innerclass refid="classlmx_1_1DenseMatrix" prot="public">lmx::DenseMatrix</innerclass>
    <innerclass refid="classlmx_1_1LinearSystem" prot="public">lmx::LinearSystem</innerclass>
    <innerclass refid="classlmx_1_1Vector" prot="public">lmx::Vector</innerclass>
    <innernamespace refid="namespacelmx">lmx</innernamespace>
    <briefdescription>
<para>This file contains both the declaration and implementation for <ref refid="classVector" kindref="compound">Vector</ref> class member and friend functions. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Daniel Iglesias </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2005<sp/>by<sp/>Daniel<sp/>Iglesias<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://code.google.com/p/lmx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/>59<sp/>Temple<sp/>Place<sp/>-<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307,<sp/>USA.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LMXVECTOR_H</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LMXVECTOR_H</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GMM</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include&quot;<ref refid="lmx__mat__type__gmmvector__sparse1_8h" kindref="compound">lmx_mat_type_gmmvector_sparse1.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include&quot;lmx_base_selector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include&quot;<ref refid="lmx__mat__elem__ref_8h" kindref="compound">lmx_mat_elem_ref.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include&quot;<ref refid="lmx__mat__type__stdvector_8h" kindref="compound">lmx_mat_type_stdvector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">lmx<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Selector;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classMatrix" kindref="compound">Matrix</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DenseMatrix;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classLinearSystem" kindref="compound">LinearSystem</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacelmx_1a9dfd59f1cf0bfa5c7cc217f0201033e6" kindref="member">setVectorType</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacelmx_1a65ad7b9cfa290037192cc3147ca508d5" kindref="member">getVectorType</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classVector" kindref="compound">Vector</ref>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>elements;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>Elem_ref&lt;T&gt;*<sp/>reference;<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>Data_vec&lt;T&gt;*<sp/>type_vector;<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>zero;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74" refid="classlmx_1_1Vector_1a95e5ab4da3326ece35572b4c41f61d15" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlmx_1_1LinearSystem" kindref="compound">LinearSystem</ref>&lt;T&gt;;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="classlmx_1_1Vector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector</ref>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="classlmx_1_1Vector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="classlmx_1_1Vector_1afd524fac19e6d3d69db5198ffe2952b0" kindref="member">~Vector</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/><ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;elements;<sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1a2133415453d3657fc61f02bc231021e2" kindref="member">load</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1ad7e220c625fcff2048c58a0c8b4f36f3" kindref="member">save</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1ae2325ba0d5e79c6593708ffd3b7e4684" kindref="member">fillIdentity</ref>(<sp/>T<sp/>factor<sp/>=<sp/>static_cast&lt;T&gt;(1)<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1a4dca7d80697c09308f709ec3889b8eb6" kindref="member">fillRandom</ref>(<sp/>T<sp/>factor<sp/>=<sp/>static_cast&lt;T&gt;(1)<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Elem__ref" kindref="compound">Elem_ref&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ac65c4ff5646cf0245dfdb5d7ba97f2b5" kindref="member">operator () </ref>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1af3492ad5c3c02796b4e6a17db71f828e" kindref="member">operator = </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1af3492ad5c3c02796b4e6a17db71f828e" kindref="member">operator = </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1af3492ad5c3c02796b4e6a17db71f828e" kindref="member">operator = </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;C&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1a2c0a2fdbc85318a0b949d67bbae3c035" kindref="member">operator += </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1a786fa62693a1d4f990f55b98ce5b0ece" kindref="member">operator -= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ac104d69fb0485778879ea7e01ca8cc41" kindref="member">operator *= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>inline<sp/>Vector<sp/>operator<sp/>*<sp/>(const<sp/>Matrix&lt;T&gt;&amp;)<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>inline<sp/>Vector<sp/>operator<sp/>*<sp/>(const<sp/>DenseMatrix&lt;T&gt;&amp;)<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ab972d613ec2d693759fce1339b7c2dd7" kindref="member">add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1a2fb58669b0c17a07d358499500b994fd" kindref="member">subs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1a4c799332f4f2f998330fa7525721091f" kindref="member">multElements</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1a4c799332f4f2f998330fa7525721091f" kindref="member">multElements</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classlmx_1_1Vector_1ab671ff37259e9f166954a17db0f90abd" kindref="member">norm1</ref><sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classlmx_1_1Vector_1aca60cec2ef0c54e2fe8164b0c842a3d9" kindref="member">norm2</ref><sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>m)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="146"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;=<sp/>elements){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Row<sp/>index<sp/>exceeds<sp/>vector<sp/>dimensions.<sp/>Trying<sp/>to<sp/>access<sp/>element<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>of<sp/>vecor<sp/>with<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_vector-&gt;readElement(m,zero);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="classlmx_1_1Vector_1a6ec5ff5f7a9c2b558fcb09a95210b18a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1a6ec5ff5f7a9c2b558fcb09a95210b18a" kindref="member">writeElement</ref>(T<sp/>theValue,<sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>m)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="159"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/>this-&gt;type_vector-&gt;writeElement(theValue,<sp/>m,<sp/>zero);<sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="classlmx_1_1Vector_1a59791f8101325539050e3c766249cd13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1a59791f8101325539050e3c766249cd13" kindref="member">addElement</ref>(T<sp/>theValue,<sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>m)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="166"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/>this-&gt;type_vector-&gt;addElement(theValue,<sp/>m,<sp/>zero);<sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="classlmx_1_1Vector_1a769b859af68fab4e61808879d2f49306" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1a769b859af68fab4e61808879d2f49306" kindref="member">clean</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;type_vector-&gt;cleanBelow(factor);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//needs<sp/>documentation</highlight></codeline>
<codeline lineno="179"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="classlmx_1_1Vector_1ae4b5507b9269f8b8b03069884bfb4bd8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1ae4b5507b9269f8b8b03069884bfb4bd8" kindref="member">clear</ref>()</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>{<sp/>this-&gt;type_vector-&gt;clear();<sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//begin<sp/>JCGO<sp/>18/03/09</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//needs<sp/>documentation</highlight></codeline>
<codeline lineno="187"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="classlmx_1_1Vector_1a2b0d3ad0094653f9e5827a1df5e837e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1a2b0d3ad0094653f9e5827a1df5e837e7" kindref="member">reset</ref>()</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>{<sp/>this-&gt;type_vector-&gt;reset();<sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//end<sp/>JCGO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195" refid="classlmx_1_1Vector_1ad8179e765582ef9d534b777f25265068" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1ad8179e765582ef9d534b777f25265068" kindref="member">resize</ref>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;elements<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;type_vector-&gt;resize(this-&gt;elements,<sp/>1);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="classlmx_1_1Vector_1a83ff9c76b09d564e4e2740543cac612a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1a83ff9c76b09d564e4e2740543cac612a" kindref="member">resize</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>vec<sp/>)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;elements<sp/>=<sp/>vec.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;type_vector-&gt;resize(this-&gt;elements,<sp/>1);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="classlmx_1_1Vector_1a218f21e3c90b9ca7a0b61917a2f5e443" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="classlmx_1_1Vector_1a218f21e3c90b9ca7a0b61917a2f5e443" kindref="member">operator + </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>B)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="217"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>elements<sp/>!=<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>sum<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>B;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="classlmx_1_1Vector_1a8e82d10ac24a5e899f4e36b81360b070" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="classlmx_1_1Vector_1a8e82d10ac24a5e899f4e36b81360b070" kindref="member">operator - </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>B)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="231"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>elements<sp/>!=<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>sum<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>B;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classlmx_1_1Vector_1a5b0ee4a4ff4ee19ea237f3935c7890bb" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classlmx_1_1Vector_1a5b0ee4a4ff4ee19ea237f3935c7890bb" kindref="member">operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>B)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="245"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>elements<sp/>!=<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>scalar_product<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;elements;<sp/>++i)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scalar_product<sp/>+=<sp/>type_vector-&gt;readElement(i,zero)<sp/>*<sp/>B.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(i);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scalar_product;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="classlmx_1_1Vector_1a824e1bde12226255c419baef4f876647" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="classlmx_1_1Vector_1a5b0ee4a4ff4ee19ea237f3935c7890bb" kindref="member">operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="261"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">mult</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.type_vector-&gt;multiplyScalar(a);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">mult</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="classlmx_1_1Vector_1a5ddc16e83bc43544364a389e86b92d18" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1a5ddc16e83bc43544364a389e86b92d18" kindref="member">latexPrint</ref>(std::ofstream&amp;<sp/>os,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>vec_name,<sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prec)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>{<sp/>os.precision(prec);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\left\\lbrace<sp/><sp/>\\begin{array}{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;1;<sp/>++j)<sp/>{<sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;vec.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>();<sp/>++i){</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;1;<sp/>++j){</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>!=<sp/>1-1)<sp/>{<sp/>os<sp/>&lt;&lt;<sp/>vec(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&amp;<sp/>&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>vec.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()-1)<sp/>{<sp/>os<sp/>&lt;&lt;<sp/>vec(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\\\\<sp/>&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>os<sp/>&lt;&lt;<sp/>vec(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\\end{array}<sp/>\\right\\rbrace<sp/>\\]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">};</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lmx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">lmx<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/><ref refid="classVector" kindref="compound">Vector&lt;T&gt;::zero</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="308" refid="classlmx_1_1Vector_1a39d6069675db4ecfc1ab81d440da759a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector&lt;T&gt;::Vector</ref>()</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>elements<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="namespacelmx_1a65ad7b9cfa290037192cc3147ca508d5" kindref="member">getVectorType</ref>())<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0<sp/>:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_vector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector&lt; T &gt;</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GMM</highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1<sp/>:</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_vector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__gmmVector__sparse" kindref="compound">Type_gmmVector_sparse&lt; T &gt;</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gmm++<sp/>not<sp/>defined.\nYou<sp/>must<sp/>set<sp/>\&quot;#define<sp/>HAVE_GMM\&quot;<sp/>in<sp/>your<sp/>file<sp/>in<sp/>order<sp/>to<sp/>use<sp/>this<sp/>library.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1failure__error" kindref="compound">failure_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>reference<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Elem__ref" kindref="compound">Elem_ref&lt;T&gt;</ref>(this-&gt;type_vector);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="339" refid="classlmx_1_1Vector_1ae633c7cc178fc379abf6bea2415d6f03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector&lt;T&gt;::Vector</ref>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>rows)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(<sp/>rows<sp/>&lt;<sp/>0<sp/>)<sp/>LMX_THROW(dimension_error,<sp/>&quot;Can&apos;t<sp/>have<sp/>a<sp/>negative-sized<sp/>vector&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>elements<sp/>=<sp/>rows;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="namespacelmx_1a65ad7b9cfa290037192cc3147ca508d5" kindref="member">getVectorType</ref>())<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0<sp/>:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_vector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector&lt; T &gt;</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GMM</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1<sp/>:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_vector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__gmmVector__sparse" kindref="compound">Type_gmmVector_sparse&lt; T &gt;</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="355"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gmm++<sp/>not<sp/>defined.\nYou<sp/>must<sp/>set<sp/>\&quot;#define<sp/>HAVE_GMM\&quot;<sp/>in<sp/>your<sp/>file<sp/>in<sp/>order<sp/>to<sp/>use<sp/>this<sp/>library.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1failure__error" kindref="compound">failure_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>type_vector-&gt;resize(elements,<sp/>1);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>reference<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Elem__ref" kindref="compound">Elem_ref&lt;T&gt;</ref>(this-&gt;type_vector);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="374" refid="classlmx_1_1Vector_1a4edc1cac2c4cd6d3791280edabd89029" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector_1a39d6069675db4ecfc1ab81d440da759a" kindref="member">Vector&lt;T&gt;::Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>A)<sp/>:<sp/>elements(A.elements)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="namespacelmx_1a65ad7b9cfa290037192cc3147ca508d5" kindref="member">getVectorType</ref>())<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0<sp/>:</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_vector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector&lt; T &gt;</ref>;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GMM</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1<sp/>:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_vector<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__gmmVector__sparse" kindref="compound">Type_gmmVector_sparse&lt; T &gt;</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gmm++<sp/>not<sp/>defined.\nYou<sp/>must<sp/>set<sp/>\&quot;#define<sp/>HAVE_GMM\&quot;<sp/>in<sp/>your<sp/>file<sp/>in<sp/>order<sp/>to<sp/>use<sp/>this<sp/>library.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1failure__error" kindref="compound">failure_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;resize(this-&gt;elements,<sp/>1);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;equals(A.type_vector);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>this-&gt;reference<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Elem__ref" kindref="compound">Elem_ref&lt;T&gt;</ref>(this-&gt;type_vector);</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="403" refid="classlmx_1_1Vector_1afd524fac19e6d3d69db5198ffe2952b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector_1afd524fac19e6d3d69db5198ffe2952b0" kindref="member">Vector&lt;T&gt;::~Vector</ref>()</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>this-&gt;reference;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;reference<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>this-&gt;type_vector;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;type_vector<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="417" refid="classlmx_1_1Vector_1a2133415453d3657fc61f02bc231021e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1a2133415453d3657fc61f02bc231021e2" kindref="member">Vector&lt;T&gt;::load</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_file)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;readDataFile(input_file);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>this-&gt;elements<sp/>=<sp/>this-&gt;type_vector-&gt;getRows();</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="427" refid="classlmx_1_1Vector_1ad7e220c625fcff2048c58a0c8b4f36f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1ad7e220c625fcff2048c58a0c8b4f36f3" kindref="member">Vector&lt;T&gt;::save</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_file)</highlight></codeline>
<codeline lineno="428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;writeDataFile(output_file);</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="438" refid="classlmx_1_1Vector_1ae2325ba0d5e79c6593708ffd3b7e4684" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1ae2325ba0d5e79c6593708ffd3b7e4684" kindref="member">Vector&lt;T&gt;::fillIdentity</ref>(<sp/>T<sp/>factor<sp/>)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;this-&gt;elements;<sp/>++i)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;type_vector-&gt;writeElement(static_cast&lt;T&gt;(factor),i,zero);</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="449" refid="classlmx_1_1Vector_1a4dca7d80697c09308f709ec3889b8eb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector_1a4dca7d80697c09308f709ec3889b8eb6" kindref="member">Vector&lt;T&gt;::fillRandom</ref>(<sp/>T<sp/>factor<sp/>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;this-&gt;elements;<sp/>++i)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;type_vector-&gt;writeElement(<sp/>factor<sp/>*<sp/>static_cast&lt;T&gt;(<sp/>std::rand()<sp/>)<sp/>/<sp/>static_cast&lt;T&gt;(RAND_MAX),i,1);</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="462" refid="classlmx_1_1Vector_1ac65c4ff5646cf0245dfdb5d7ba97f2b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Elem__ref" kindref="compound">Elem_ref&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ac65c4ff5646cf0245dfdb5d7ba97f2b5" kindref="member">Vector&lt;T&gt;::operator () </ref>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>row)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>row<sp/>&gt;=<sp/>this-&gt;elements<sp/>){</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Row<sp/>index<sp/>exceeds<sp/>vector<sp/>dimensions.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Index:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>row<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>reference-&gt;write_pos(row,zero);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*reference;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="483" refid="classlmx_1_1Vector_1af3492ad5c3c02796b4e6a17db71f828e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1af3492ad5c3c02796b4e6a17db71f828e" kindref="member">Vector&lt;T&gt;::operator = </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>A)</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>this-&gt;elements<sp/>=<sp/>rows(A);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;this-&gt;elements;<sp/>++i)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>(<sp/>)(i,zero)<sp/>=<sp/>readElement(A,i,zero);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="497" refid="classlmx_1_1Vector_1a84e014345158da7a6b89a4879c8086c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1af3492ad5c3c02796b4e6a17db71f828e" kindref="member">Vector&lt;T&gt;::operator = </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;elements<sp/>!=<sp/>v.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>type_vector-&gt;equals(v.type_vector);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="517" refid="classlmx_1_1Vector_1a90f36c22fe1a94babc3d077912fd9f61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1af3492ad5c3c02796b4e6a17db71f828e" kindref="member">Vector&lt;T&gt;::operator = </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;C&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;elements<sp/>!=<sp/>v.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;(this-&gt;elements)<sp/>;<sp/>++i){</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;operator<sp/>(<sp/>)(i)<sp/>=<sp/>v.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(i);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="538" refid="classlmx_1_1Vector_1a2c0a2fdbc85318a0b949d67bbae3c035" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1a2c0a2fdbc85318a0b949d67bbae3c035" kindref="member">Vector&lt;T&gt;::operator += </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;elements<sp/>!=<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>type_vector-&gt;add(b.type_vector);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="557" refid="classlmx_1_1Vector_1a786fa62693a1d4f990f55b98ce5b0ece" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1a786fa62693a1d4f990f55b98ce5b0ece" kindref="member">Vector&lt;T&gt;::operator -= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;elements<sp/>!=<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>type_vector-&gt;substract(b.type_vector);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="classlmx_1_1Vector_1ac104d69fb0485778879ea7e01ca8cc41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ac104d69fb0485778879ea7e01ca8cc41" kindref="member">Vector&lt;T&gt;::operator *= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>scalar)</highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>type_vector-&gt;multiplyScalar(scalar);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="comment">//<sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Vector&lt;T&gt;<sp/>Vector&lt;T&gt;::operator<sp/>*<sp/>(const<sp/>Matrix&lt;T&gt;&amp;<sp/>A)<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(<sp/>A.cols()<sp/>!=<sp/>elements<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/>&quot;Can&apos;t<sp/>multiply<sp/>vector^T<sp/>*<sp/>matrix:<sp/>Dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Matrix<sp/>dimension:<sp/>(&quot;<sp/>&lt;&lt;<sp/>A.rows()<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>A.cols()<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>endl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Vector<sp/>dimension:<sp/>(&quot;<sp/>&lt;&lt;<sp/>elements<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>LMX_THROW(dimension_error,<sp/>message.str()<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Vector&lt;T&gt;<sp/>c(A.rows());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>c.mult(A,*this);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>c;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="comment">//<sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Vector&lt;T&gt;<sp/>Vector&lt;T&gt;::operator<sp/>*<sp/>(const<sp/>DenseMatrix&lt;T&gt;&amp;<sp/>A)<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(<sp/>A.cols()<sp/>!=<sp/>elements<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/>&quot;Can&apos;t<sp/>multiply<sp/>Vector^T<sp/>*<sp/>DenseMatrix:<sp/>Dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Matrix<sp/>dimension:<sp/>(&quot;<sp/>&lt;&lt;<sp/>A.rows()<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>A.cols()<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>endl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Vector<sp/>dimension:<sp/>(&quot;<sp/>&lt;&lt;<sp/>elements<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>LMX_THROW(dimension_error,<sp/>message.str()<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Vector&lt;T&gt;<sp/>c(A.rows());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>c.mult(A,*this);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>c;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="classlmx_1_1Vector_1ab972d613ec2d693759fce1339b7c2dd7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ab972d613ec2d693759fce1339b7c2dd7" kindref="member">Vector&lt;T&gt;::add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>B)</highlight></codeline>
<codeline lineno="642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;elements<sp/>!=<sp/>A.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>||<sp/>this-&gt;elements<sp/>!=<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;First<sp/>RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;equals(A.type_vector);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;add(B.type_vector);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664" refid="classlmx_1_1Vector_1a2fb58669b0c17a07d358499500b994fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1a2fb58669b0c17a07d358499500b994fd" kindref="member">Vector&lt;T&gt;::subs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>B)</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;elements<sp/>!=<sp/>A.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>||<sp/>this-&gt;elements<sp/>!=<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;First<sp/>RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;equals(A.type_vector);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;substract(B.type_vector);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">Vector&lt;T&gt;::mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>A.cols()<sp/>!=<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>multiply<sp/>matrix<sp/>*<sp/>vector:<sp/>Dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.rows()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.cols()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>elements<sp/>!=<sp/>A.rows()<sp/>)<sp/>resize(<sp/>A.rows()<sp/>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacelmx_1a2aca178888955f2289a8d3d6e5c58fd0" kindref="member">getMatrixType</ref>()==1<sp/>&amp;&amp;<sp/><ref refid="namespacelmx_1a65ad7b9cfa290037192cc3147ca508d5" kindref="member">getVectorType</ref>()==0)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>mat_vec_mult&lt;T&gt;(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classlmx_1_1Type__csc" kindref="compound">Type_csc&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(A.type_matrix),</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(b.type_vector),</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;type_vector)<sp/>);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>else<sp/>if<sp/>(getMatrixType()==1<sp/>&amp;&amp;<sp/>getVectorType()==2)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>mat_vec_mult&lt;T&gt;(<sp/>static_cast&lt;const<sp/>Type_csc&lt;T&gt;*&gt;(A.type_matrix),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>Type_cVector&lt;T&gt;*&gt;(b.type_vector),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;Type_cVector&lt;T&gt;*&gt;(this-&gt;type_vector)<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GMM</highlight></codeline>
<codeline lineno="716"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacelmx_1a2aca178888955f2289a8d3d6e5c58fd0" kindref="member">getMatrixType</ref>()==2<sp/>&amp;&amp;<sp/><ref refid="namespacelmx_1a65ad7b9cfa290037192cc3147ca508d5" kindref="member">getVectorType</ref>()==0)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>mat_vec_mult&lt;T&gt;(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classlmx_1_1Type__gmm" kindref="compound">Type_gmm&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(A.type_matrix),</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(b.type_vector),</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;type_vector)<sp/>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacelmx_1a2aca178888955f2289a8d3d6e5c58fd0" kindref="member">getMatrixType</ref>()==3<sp/>&amp;&amp;<sp/><ref refid="namespacelmx_1a65ad7b9cfa290037192cc3147ca508d5" kindref="member">getVectorType</ref>()==0)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>mat_vec_mult&lt;T&gt;(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classlmx_1_1Type__gmm__sparse" kindref="compound">Type_gmm_sparse&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(A.type_matrix),</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(b.type_vector),</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector&lt;T&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;type_vector)<sp/>);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="727"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;A.rows();<sp/>++i){</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;operator<sp/>(<sp/>)(i)<sp/>=<sp/>static_cast&lt;T&gt;(0);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>j=0;<sp/>j&lt;A.cols();<sp/>++j)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>(<sp/>)(i)<sp/>+=<sp/>A.readElement(i,j)<sp/>*<sp/>b.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(j);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751" refid="classlmx_1_1Vector_1a324cd467e73f7d05e83840da974f2128" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">Vector&lt;T&gt;::mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>A.cols()<sp/>!=<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>multiply<sp/>DenseMatrix<sp/>*<sp/>Vector:<sp/>Dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DenseMatrix<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.rows()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.cols()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>elements<sp/>!=<sp/>A.rows()<sp/>)<sp/>resize(<sp/>A.rows()<sp/>);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;A.rows();<sp/>++i){</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;operator<sp/>(<sp/>)(i)<sp/>=<sp/>static_cast&lt;T&gt;(0);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>j=0;<sp/>j&lt;A.cols();<sp/>++j)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>(<sp/>)(i)<sp/>+=<sp/>A.<ref refid="classlmx_1_1DenseMatrix_1a3e3551eb4f7f09d28e0966108a02276d" kindref="member">readElement</ref>(i,j)<sp/>*<sp/>b.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(j);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780" refid="classlmx_1_1Vector_1aa5f038fd85d9972fccef411d30e46c1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">Vector&lt;T&gt;::mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>scalar)</highlight></codeline>
<codeline lineno="781"><highlight class="normal">{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;this-&gt;elements;<sp/>++i)<sp/>this-&gt;type_vector-&gt;multiplyScalar(scalar);</highlight></codeline>
<codeline lineno="783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794" refid="classlmx_1_1Vector_1aa1a86eaea1fba85d03424c35e3e11fe1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">Vector&lt;T&gt;::mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>B,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>scalar)</highlight></codeline>
<codeline lineno="795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;elements<sp/>!=<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;equals(B.type_vector)<sp/>;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;multiplyScalar(scalar);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817" refid="classlmx_1_1Vector_1a69290ccfa8ac2d101a0780343817f1e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">Vector&lt;T&gt;::mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>scalar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>B)</highlight></codeline>
<codeline lineno="818"><highlight class="normal">{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;elements<sp/>!=<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;equals(B.type_vector)<sp/>;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>this-&gt;type_vector-&gt;multiplyScalar(scalar);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840" refid="classlmx_1_1Vector_1a8b3ba996acf4c6e45a7d7d1b8739c691" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">Vector&lt;T&gt;::mult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>B)</highlight></codeline>
<codeline lineno="841"><highlight class="normal">{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>A.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>!=<sp/>3<sp/>||<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>!=<sp/>3<sp/>||<sp/>this-&gt;elements<sp/>!=<sp/>3<sp/>){</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch<sp/>for<sp/>Cross<sp/>product<sp/>(<sp/>this-&gt;mult(A,B)<sp/>).<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RHS<sp/>vector<sp/>A<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RHS<sp/>vector<sp/>B<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;operator<sp/>(<sp/>)(0)<sp/>=<sp/>A.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(1)<sp/>*<sp/>B.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(2)<sp/>-<sp/>A.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(2)<sp/>*<sp/>B.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(1);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;operator<sp/>(<sp/>)(1)<sp/>=<sp/>A.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(2)<sp/>*<sp/>B.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(0)<sp/>-<sp/>A.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(0)<sp/>*<sp/>B.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(2);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;operator<sp/>(<sp/>)(2)<sp/>=<sp/>A.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(0)<sp/>*<sp/>B.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(1)<sp/>-<sp/>A.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(1)<sp/>*<sp/>B.<ref refid="classlmx_1_1Vector_1a4fc2d153c9436f3d377c1867b608ddd7" kindref="member">readElement</ref>(0);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866" refid="classlmx_1_1Vector_1a4c799332f4f2f998330fa7525721091f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1a4c799332f4f2f998330fa7525721091f" kindref="member">Vector&lt;T&gt;::multElements</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>B)</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;type_vector-&gt;multiplyElements(B.type_vector);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883" refid="classlmx_1_1Vector_1a1aefc241385130c01630fd1fa6e05c5d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/><ref refid="classlmx_1_1Vector_1a4c799332f4f2f998330fa7525721091f" kindref="member">Vector&lt;T&gt;::multElements</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>B)</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;elements<sp/>!=<sp/>A.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>||<sp/>this-&gt;elements<sp/>!=<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vectors<sp/>dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;elements<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;First<sp/>RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>RHS<sp/>vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>B.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;type_vector-&gt;equals(A.type_vector);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;type_vector-&gt;multiplyElements(B.type_vector);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="903" refid="classlmx_1_1Vector_1ab671ff37259e9f166954a17db0f90abd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classlmx_1_1Vector_1ab671ff37259e9f166954a17db0f90abd" kindref="member">Vector&lt;T&gt;::norm1</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="904"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="namespacecofe_1a0e56d8696cb0405dc99575cedd504e1b" kindref="member">norm</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;elements;<sp/>++i)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>norm<sp/>+=<sp/>std::abs(type_vector-&gt;readElement(i,zero));</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacecofe_1a0e56d8696cb0405dc99575cedd504e1b" kindref="member">norm</ref>;</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="915" refid="classlmx_1_1Vector_1aca60cec2ef0c54e2fe8164b0c842a3d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="classlmx_1_1Vector_1aca60cec2ef0c54e2fe8164b0c842a3d9" kindref="member">Vector&lt;T&gt;::norm2</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="916"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="namespacecofe_1a0e56d8696cb0405dc99575cedd504e1b" kindref="member">norm</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;elements;<sp/>++i)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>norm<sp/>+=<sp/>type_vector-&gt;readElement(i,zero)<sp/>*<sp/>type_vector-&gt;readElement(i,zero);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(norm);</highlight></codeline>
<codeline lineno="921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Overloaded<sp/>operators<sp/>with<sp/>Vector<sp/>as<sp/>rvalue:<sp/><sp/>//////////////////</highlight></codeline>
<codeline lineno="927"><highlight class="comment"></highlight></codeline>
<codeline lineno="935"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="936" refid="namespacelmx_1a056662a18d83b06f907bd389b7001b35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="namespacelmx_1ad723ad98140948b6fc56bf5d0193c1a1" kindref="member">operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="937"><highlight class="normal">{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>A.cols()<sp/>!=<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>multiply<sp/>Matrix<sp/>*<sp/>Vector:<sp/>Dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.cols()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.rows()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>c(A.rows());</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>c.<ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">mult</ref>(A,b);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="958" refid="namespacelmx_1a77129091804126ffb475a3e086be8612" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="namespacelmx_1ad723ad98140948b6fc56bf5d0193c1a1" kindref="member">operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="959"><highlight class="normal">{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>A.cols()<sp/>!=<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>){</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>multiply<sp/>DenseMatrix<sp/>*<sp/>vector:<sp/>Dimensions<sp/>mismatch.<sp/>\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DenseMatrix<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.cols()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>A.rows()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>dimension:<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>b.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" kindref="member">LMX_THROW</ref>(<ref refid="classlmx_1_1dimension__error" kindref="compound">dimension_error</ref>,<sp/>message.str()<sp/>);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>c(A.rows());</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>c.<ref refid="classlmx_1_1Vector_1ae68d2b9e72a8a6aa9431e9dcdb126fdc" kindref="member">mult</ref>(A,b);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="979" refid="namespacelmx_1aa216d870ef9e604a7ef9bd3266e148f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref><sp/><ref refid="namespacelmx_1ad723ad98140948b6fc56bf5d0193c1a1" kindref="member">operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref>&amp;<sp/>B)</highlight></codeline>
<codeline lineno="980"><highlight class="normal">{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><ref refid="classlmx_1_1Vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>mult(B);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>mult<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mult;</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="993" refid="namespacelmx_1a9a344d9925b2c2536ad9a92115170e0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(std::ostream&amp;<sp/>os,<sp/>const<sp/>Vector&lt;T&gt;&amp;<sp/>vec)</highlight></codeline>
<codeline lineno="994"><highlight class="normal">{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vec.<ref refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!vec.size()<sp/>)<sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;vec.size();<sp/>++i)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>vec.readElement(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lmx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_vector.h"/>
  </compounddef>
</doxygen>
