<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="ogive_8cpp" kind="file">
    <compoundname>ogive.cpp</compoundname>
    <includes refid="ogive_8h" local="yes">ogive.h</includes>
    <includes local="no">vtkPoints.h</includes>
    <includes local="no">vtkUnstructuredGrid.h</includes>
    <includes local="no">vtkCell.h</includes>
    <incdepgraph>
      <node id="713">
        <label>LMX/lmx_nlsolvers.h</label>
      </node>
      <node id="715">
        <label>element.h</label>
        <link refid="element_8h"/>
        <childnode refid="709" relation="include">
        </childnode>
      </node>
      <node id="717">
        <label>vtkPoints.h</label>
      </node>
      <node id="714">
        <label>particle.h</label>
        <link refid="particle_8h"/>
        <childnode refid="708" relation="include">
        </childnode>
      </node>
      <node id="711">
        <label>cmath</label>
      </node>
      <node id="710">
        <label>map</label>
      </node>
      <node id="719">
        <label>vtkCell.h</label>
      </node>
      <node id="705">
        <label>src/ogive.cpp</label>
        <link refid="ogive.cpp"/>
        <childnode refid="706" relation="include">
        </childnode>
        <childnode refid="717" relation="include">
        </childnode>
        <childnode refid="718" relation="include">
        </childnode>
        <childnode refid="719" relation="include">
        </childnode>
      </node>
      <node id="718">
        <label>vtkUnstructuredGrid.h</label>
      </node>
      <node id="709">
        <label>vector</label>
      </node>
      <node id="716">
        <label>node.h</label>
        <link refid="node_8h"/>
        <childnode refid="708" relation="include">
        </childnode>
      </node>
      <node id="712">
        <label>LMX/lmx.h</label>
      </node>
      <node id="706">
        <label>ogive.h</label>
        <link refid="ogive_8h"/>
        <childnode refid="707" relation="include">
        </childnode>
      </node>
      <node id="708">
        <label>iostream</label>
      </node>
      <node id="707">
        <label>geometry.h</label>
        <link refid="geometry_8h"/>
        <childnode refid="708" relation="include">
        </childnode>
        <childnode refid="709" relation="include">
        </childnode>
        <childnode refid="710" relation="include">
        </childnode>
        <childnode refid="711" relation="include">
        </childnode>
        <childnode refid="712" relation="include">
        </childnode>
        <childnode refid="713" relation="include">
        </childnode>
        <childnode refid="714" relation="include">
        </childnode>
        <childnode refid="715" relation="include">
        </childnode>
        <childnode refid="716" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2007<sp/>by<sp/>Daniel<sp/>Iglesias<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/><sp/>daniel.iglesias@ciemat.es<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/>59<sp/>Temple<sp/>Place<sp/>-<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307,<sp/>USA.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ogive_8h" kindref="compound">ogive.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;iomanip.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtkPoints.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtkUnstructuredGrid.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vtkCell.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classOgive_1af64e93b747bcc7f80d1c64705c335f22" refkind="member"><highlight class="normal"><ref refid="classOgive_1af64e93b747bcc7f80d1c64705c335f22" kindref="member">Ogive::Ogive</ref>()</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classOgive_1a4cc1f5beafcd2259677c4053d1ce38d1" refkind="member"><highlight class="normal"><ref refid="classOgive_1af64e93b747bcc7f80d1c64705c335f22" kindref="member">Ogive::Ogive</ref><sp/>(<sp/>std::string<sp/>type_in,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>par0_in,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>par1_in,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>par2_in,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>par3_in,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>par4_in<sp/>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classGeometry" kindref="compound">Geometry</ref><sp/>(<sp/>type_in,<sp/>par0_in,<sp/>par3_in,<sp/>par1_in<sp/>)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>initDiam<sp/>(<sp/>par2_in<sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>ogive_radius<sp/>(<sp/>par4_in<sp/>)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a047dd3be42ddff67aa9f8d494e7e8568" kindref="member">gridWidth</ref><sp/>=<sp/>initDiam/2.;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tau<sp/>=<sp/>asin<sp/>(<sp/><ref refid="classGeometry_1a83cd2f4ce607b1b70227780181b197c6" kindref="member">length</ref>/ogive_radius<sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>final_radius<sp/>=<sp/>initDiam/2.<sp/>-<sp/>ogive_radius*<sp/>(<sp/>1.<sp/>-<sp/>cos<sp/>(<sp/>tau<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classOgive_1a83d0745d3b4324cb17976fc2dfdd4ac1" refkind="member"><highlight class="normal"><ref refid="classOgive_1a83d0745d3b4324cb17976fc2dfdd4ac1" kindref="member">Ogive::~Ogive</ref>()</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classOgive_1a925beac2c2c2ee5f7ad6654a4f1048e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOgive_1a925beac2c2c2ee5f7ad6654a4f1048e5" kindref="member">Ogive::setSections</ref><sp/>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance<sp/>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref><sp/>=<sp/><ref refid="classGeometry_1a83cd2f4ce607b1b70227780181b197c6" kindref="member">length</ref><sp/>/distance<sp/>+<sp/>1<sp/>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sections<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="classOgive_1aa8561ca676dbadc7e36a7e9c6b805a72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOgive_1aa8561ca676dbadc7e36a7e9c6b805a72" kindref="member">Ogive::computeGeometry</ref>()</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pi<sp/>=<sp/>3.1416;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta,<sp/>tau;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius,<sp/>ra,<sp/>rb;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/>b,<sp/>c;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>z,<sp/>zlocal;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sectionDif<sp/>=<sp/><ref refid="classGeometry_1a83cd2f4ce607b1b70227780181b197c6" kindref="member">length</ref><sp/>/<sp/>(<sp/><ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref><sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nodes<sp/>map<sp/>is<sp/>going<sp/>to<sp/>be<sp/>filled<sp/>to<sp/>a<sp/>size<sp/>of<sp/>i*j<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>i<sp/>is<sp/>the<sp/>number<sp/>of<sp/>longitudinal<sp/>sections<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>j<sp/>is<sp/>the<sp/>number<sp/>of<sp/>transversal<sp/>(angular)<sp/>sectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i=0;<sp/>i&lt;<ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref>;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>i<sp/>*<sp/>sectionDif<sp/>+<sp/><ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tau<sp/>=<sp/>asin<sp/>(<sp/>(<sp/>z-z0<sp/>)<sp/>/ogive_radius<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>initDiam/2.<sp/>-<sp/>ogive_radius*<sp/>(<sp/>1.<sp/>-<sp/>cos<sp/>(<sp/>tau<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>(length<sp/>+<sp/>z0<sp/>-<sp/>z)<sp/>*<sp/>tan(slope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j=0;<sp/>j&lt;<ref refid="classGeometry_1a5e34644bfae4c1df92cb6bf98a8c62c7" kindref="member">sectors</ref>;<sp/>++j<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//closed<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>2<sp/>*<sp/>pi<sp/>*<sp/>j<sp/>/<sp/>sectors<sp/>-<sp/>pi;<sp/></highlight><highlight class="comment">//<sp/>angle<sp/>between<sp/>-pi<sp/>and<sp/>pi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>radius<sp/>*<sp/>cos<sp/>(<sp/>theta<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>radius<sp/>*<sp/>sin<sp/>(<sp/>theta<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>[i*sectors<sp/>+<sp/>j]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classNode" kindref="compound">Node</ref><sp/>(<sp/>x,<sp/>y,<sp/>z<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>2<sp/>*<sp/>pi<sp/>/<sp/><ref refid="classGeometry_1a5e34644bfae4c1df92cb6bf98a8c62c7" kindref="member">sectors</ref>;<sp/></highlight><highlight class="comment">//<sp/>angle<sp/>between<sp/>-pi<sp/>and<sp/>pi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i=0;<sp/>i&lt;sections-1;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zlocal<sp/>=<sp/>i<sp/>*<sp/>sectionDif;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tau<sp/>=<sp/>asin<sp/>(<sp/>zlocal/ogive_radius<sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ra<sp/>=<sp/>initDiam/2.<sp/>-<sp/>ogive_radius*<sp/>(<sp/>1.<sp/>-<sp/>cos<sp/>(<sp/>tau<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tau<sp/>=<sp/>asin<sp/>(<sp/>zlocal/ogive_radius<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb<sp/>=<sp/>initDiam/2.<sp/>-<sp/>ogive_radius*<sp/>(<sp/>1.<sp/>-<sp/>cos<sp/>(<sp/>tau<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>ra<sp/>*<sp/>theta;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>rb<sp/>*<sp/>theta;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>sqrt<sp/>(<sp/>pow<sp/>(<sp/>ra-rb,<sp/>2<sp/>)<sp/>+<sp/>pow<sp/>(<sp/>sectionDif,<sp/>2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j=0;<sp/>j&lt;<ref refid="classGeometry_1a5e34644bfae4c1df92cb6bf98a8c62c7" kindref="member">sectors</ref>-1;<sp/>++j<sp/>)<sp/><sp/></highlight><highlight class="comment">//last<sp/>sector<sp/>is<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.push_back<sp/>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classElement" kindref="compound">Element</ref><sp/>(<sp/>0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>type<sp/>quad</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;setNumber<sp/>(<sp/>i*sectors<sp/>+<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;addNode<sp/>(<sp/>i*sectors<sp/>+<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;addNode<sp/>(<sp/>i*sectors<sp/>+<sp/>j+1<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;addNode<sp/>(<sp/>(<sp/>i+1<sp/>)<sp/>*sectors<sp/>+<sp/>j+1<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;addNode<sp/>(<sp/>(<sp/>i+1<sp/>)<sp/>*sectors<sp/>+<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;generateGeometry();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;setArea<sp/>(<sp/>(<sp/>a<sp/>+<sp/>b<sp/>)<sp/>/2<sp/>*<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;a<sp/>=<sp/>&quot;&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/>&quot;,<sp/>b<sp/>=<sp/>&quot;&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/>&quot;,<sp/>Area<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>elements.back()-&gt;getArea()<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>sector:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.push_back<sp/>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classElement" kindref="compound">Element</ref><sp/>(<sp/>0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>type<sp/>quad</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;setNumber<sp/>(<sp/>i*sectors<sp/>+<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;addNode<sp/>(<sp/>i*sectors<sp/>+<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;addNode<sp/>(<sp/>i*sectors<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;addNode<sp/>(<sp/>(<sp/>i+1<sp/>)<sp/>*sectors<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;addNode<sp/>(<sp/>(<sp/>i+1<sp/>)<sp/>*sectors<sp/>+<sp/>j<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;generateGeometry();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.back()-&gt;setArea<sp/>(<sp/>(<sp/>a<sp/>+<sp/>b<sp/>)<sp/>/2<sp/>*<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;a<sp/>=<sp/>&quot;&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/>&quot;,<sp/>b<sp/>=<sp/>&quot;&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/>&quot;,<sp/>Area<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>elements.back()-&gt;getArea()<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGeometry_1aed47a80e867e618e98272e830d297deb" kindref="member">gridPoints</ref><sp/>=<sp/>vtkPoints::New();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGeometry_1aed47a80e867e618e98272e830d297deb" kindref="member">gridPoints</ref>-&gt;SetNumberOfPoints<sp/>(<sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>.size()<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>std::map&lt;int,<sp/>Node*&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>.begin();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>.end();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1aed47a80e867e618e98272e830d297deb" kindref="member">gridPoints</ref>-&gt;InsertPoint<sp/>(<sp/>it-&gt;first,<sp/>it-&gt;second-&gt;getX(),<sp/>it-&gt;second-&gt;getY(),<sp/>it-&gt;second-&gt;getZ()<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGeometry_1aebabda9f0c07ecb986195857913b4ee8" kindref="member">grid</ref><sp/>=<sp/>vtkUnstructuredGrid::New();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGeometry_1aebabda9f0c07ecb986195857913b4ee8" kindref="member">grid</ref>-&gt;Allocate<sp/>(<sp/>1000,1000<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>std::vector&lt;Element*&gt;::iterator<sp/>it=<ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.begin();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it!=<sp/><ref refid="classGeometry_1acef6e83971679a9c4672c3b610acb58e" kindref="member">elements</ref>.end();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1aebabda9f0c07ecb986195857913b4ee8" kindref="member">grid</ref>-&gt;InsertNextCell<sp/>(<sp/>(<sp/>*it<sp/>)-&gt;geometry-&gt;GetCellType(),<sp/>(<sp/>*it<sp/>)-&gt;geometry-&gt;GetPointIds()<sp/>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGeometry_1aebabda9f0c07ecb986195857913b4ee8" kindref="member">grid</ref>-&gt;SetPoints<sp/>(<sp/><ref refid="classGeometry_1aed47a80e867e618e98272e830d297deb" kindref="member">gridPoints</ref><sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="classOgive_1a849470be3cd2e0db95fd191b0d41f0f5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOgive_1a849470be3cd2e0db95fd191b0d41f0f5" kindref="member">Ogive::residue</ref><sp/>(<sp/>lmx::Vector&lt;double&gt;&amp;<sp/>res,<sp/>lmx::Vector&lt;double&gt;&amp;<sp/>conf<sp/>)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>conf.readElement<sp/>(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>if<sp/>(<sp/>(<sp/>pow(y+z0*vy,2)+pow(x+z0*vx,2)<sp/>&gt;<sp/>pow(initDiam/2.,2)<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pow(y+(z0+length)*vy,2)+pow(x+(z0+length)*vx,2)<sp/>&lt;</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pow(final_radius,2)<sp/>)</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.writeElement(0.,0);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>else<sp/>if(t&lt;z0<sp/>){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.writeElement(<sp/>pow(x+vx*t,2)+pow(y+vy*t,2)<sp/>-<sp/>initDiam/2.,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>tau<sp/>=<sp/>asin((t-z0)/ogive_radius);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>radius<sp/>=<sp/>initDiam/2.<sp/>-<sp/>ogive_radius*(1.<sp/>-<sp/>cos(tau));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>res.writeElement<sp/>(</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pow(x+vx*t,2)+pow(y+vy*t,2)<sp/>-<sp/>radius)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-initDiam/2.+ogive_radius*<sp/>(<sp/>1.-sqrt<sp/>(<sp/>1-pow<sp/>(<sp/>t-<ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref>,2<sp/>)<sp/>/pow<sp/>(<sp/>ogive_radius,2<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+sqrt<sp/>(<sp/>pow<sp/>(<sp/>y+t*vy,2<sp/>)<sp/>+pow<sp/>(<sp/>x+t*vx,2<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>0</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="classOgive_1a3260fd40c32dbb4e1c5f17f7903e7c20" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOgive_1a3260fd40c32dbb4e1c5f17f7903e7c20" kindref="member">Ogive::jacobian</ref><sp/>(<sp/>lmx::Matrix&lt;double&gt;&amp;<sp/>jac,<sp/>lmx::Vector&lt;double&gt;&amp;<sp/>conf<sp/>)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>conf.readElement<sp/>(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if(t&lt;z0<sp/>/*||<sp/>t&gt;(z0+length)*/)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>jac.writeElement(<sp/>2*vy*(y+t*vy)+2*vx*(x+t*vx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>0,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>else{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>tau<sp/>=<sp/>asin((t-z0)/ogive_radius);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>d_tau_dt<sp/>=1./(ogive_radius*sqrt(1-pow(t-z0,2)/pow(ogive_radius,2)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>jac.writeElement</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>(<sp/>t-<ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref><sp/>)<sp/>/<sp/>(<sp/>ogive_radius*sqrt<sp/>(<sp/>1-pow<sp/>(<sp/>t-<ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref>,2<sp/>)<sp/>/pow<sp/>(<sp/>ogive_radius,2<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(<sp/>2*vy*<sp/>(<sp/>y+t*vy<sp/>)<sp/>+2*vx*<sp/>(<sp/>x+t*vx<sp/>)<sp/>)<sp/>/<sp/>(<sp/>2*sqrt<sp/>(<sp/>pow<sp/>(<sp/>y+t*vy,2<sp/>)<sp/>+pow<sp/>(<sp/>x+t*vx,2<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>0,<sp/>0</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="classOgive_1aa2ffe27bec17dcb9b7f99a26d9ec9f6e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOgive_1aa2ffe27bec17dcb9b7f99a26d9ec9f6e" kindref="member">Ogive::computeIntersection</ref><sp/>(<sp/><ref refid="classParticle" kindref="compound">Particle</ref>*<sp/>particle<sp/>)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>particle-&gt;<ref refid="classParticle_1abf0b2c3e900576254d9e76255dfaf81d" kindref="member">getX</ref>();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>particle-&gt;<ref refid="classParticle_1a0fc4232c919f5b1946c2fa74f7a3a9ed" kindref="member">getY</ref>();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/>particle-&gt;<ref refid="classParticle_1a1b287734891b40546e06e17db8589fca" kindref="member">getZ</ref>();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>vx<sp/>=<sp/>particle-&gt;<ref refid="classParticle_1a0813b73b2d08f57f05607df530684e14" kindref="member">getXdiv</ref>();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>vy<sp/>=<sp/>particle-&gt;<ref refid="classParticle_1a1898356f0c9ecb8dc5bae09a8dc0e326" kindref="member">getYdiv</ref>();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>vz<sp/>=<sp/>particle-&gt;<ref refid="classParticle_1a9435d915d86f9df46203f9b5c72888d0" kindref="member">getZdiv</ref>();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>lmx::Vector&lt;double&gt;<sp/>initialGuess<sp/>(<sp/>1<sp/>);<sp/></highlight><highlight class="comment">//<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>initialGuess<sp/>(<sp/>0.<sp/>)<sp/>=<sp/><ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>lmx::NLSolver&lt;Ogive&gt;<sp/>theSolver;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>theSolver.setInfo<sp/>(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>theSolver.setInitialConfiguration<sp/>(<sp/>initialGuess<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>theSolver.setSystem<sp/>(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>theSolver.setResidue<sp/>(<sp/>&amp;<ref refid="classOgive_1a849470be3cd2e0db95fd191b0d41f0f5" kindref="member">Ogive::residue</ref><sp/>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>theSolver.setJacobian<sp/>(<sp/>&amp;<ref refid="classOgive_1a3260fd40c32dbb4e1c5f17f7903e7c20" kindref="member">Ogive::jacobian</ref><sp/>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>theSolver.setConvergence(<sp/>&amp;Ogive::myConvergence<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>theSolver.setMaxIterations(<sp/>100<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>pow<sp/>(<sp/>y+<ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref>*vy,2<sp/>)<sp/>+pow<sp/>(<sp/>x+<ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref>*vx,2<sp/>)<sp/>&gt;<sp/>pow<sp/>(<sp/>initDiam/2.,2<sp/>)<sp/>)<sp/></highlight><highlight class="comment">/*<sp/>||</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pow(y+(z0+length)*vy,2)+pow(x+(z0+length)*vx,2)<sp/>&lt;</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pow(final_radius,2)<sp/>)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a90ddae3ca87d3c358e2f63611c244be7" kindref="member">paramTrajectories</ref>.push_back<sp/>(<sp/><ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref>-1.<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theSolver.solve<sp/>(<sp/>100<sp/>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>theSolver.getSolution().readElement(0)<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a90ddae3ca87d3c358e2f63611c244be7" kindref="member">paramTrajectories</ref>.push_back<sp/>(<sp/>theSolver.getSolution().readElement<sp/>(<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="classOgive_1a1f076226bfd547f46542d02c49399693" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOgive_1a1f076226bfd547f46542d02c49399693" kindref="member">Ogive::computeNodalPower</ref><sp/>(<sp/><ref refid="classParticle" kindref="compound">Particle</ref>*<sp/>particle<sp/>)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classGeometry_1a90ddae3ca87d3c358e2f63611c244be7" kindref="member">paramTrajectories</ref>.back()<sp/>&gt;<sp/><ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a90ddae3ca87d3c358e2f63611c244be7" kindref="member">paramTrajectories</ref>.back()<sp/>&lt;=<sp/>(<sp/><ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref>+<ref refid="classGeometry_1a83cd2f4ce607b1b70227780181b197c6" kindref="member">length</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>we<sp/>compute<sp/>the<sp/>intersection<sp/>point<sp/>of<sp/>the<sp/>last<sp/>particle<sp/>computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>&quot;computeIntersection&quot;<sp/>function:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>particle-&gt;<ref refid="classParticle_1abf0b2c3e900576254d9e76255dfaf81d" kindref="member">getX</ref>()<sp/>+<sp/>particle-&gt;<ref refid="classParticle_1a0813b73b2d08f57f05607df530684e14" kindref="member">getXdiv</ref>()<sp/>*<sp/><ref refid="classGeometry_1a90ddae3ca87d3c358e2f63611c244be7" kindref="member">paramTrajectories</ref>.back();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>particle-&gt;<ref refid="classParticle_1a0fc4232c919f5b1946c2fa74f7a3a9ed" kindref="member">getY</ref>()<sp/>+<sp/>particle-&gt;<ref refid="classParticle_1a1898356f0c9ecb8dc5bae09a8dc0e326" kindref="member">getYdiv</ref>()<sp/>*<sp/><ref refid="classGeometry_1a90ddae3ca87d3c358e2f63611c244be7" kindref="member">paramTrajectories</ref>.back();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/></highlight><highlight class="comment">/*particle-&gt;getZ()<sp/>+*/</highlight><highlight class="normal"><sp/><ref refid="classGeometry_1a90ddae3ca87d3c358e2f63611c244be7" kindref="member">paramTrajectories</ref>.back()<sp/>-<sp/><ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;particle-&gt;getZ()<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>particle-&gt;getZ()<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;particle-&gt;getZdiv()<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>particle-&gt;getZdiv()<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;paramTrajectories.back()<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>paramTrajectories.back()<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>compute<sp/>the<sp/>power<sp/>(=<sp/>energy<sp/>*<sp/>current)<sp/>of<sp/>the<sp/>particle:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>particle_power<sp/>=<sp/>particle-&gt;<ref refid="classParticle_1ad8d1a1de9b549f2a532a8d9a9f97c8fb" kindref="member">getEnergy</ref>()<sp/>*<sp/>0.1255;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>add<sp/>to<sp/>the<sp/>adjacent<sp/>points:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>intersection<sp/>shall<sp/>be<sp/>between<sp/>two<sp/>sections:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>section_back<sp/>=<sp/>floor<sp/>(<sp/>z<sp/>/<sp/>(<sp/><ref refid="classGeometry_1a83cd2f4ce607b1b70227780181b197c6" kindref="member">length</ref>/<sp/>(<sp/><ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref>-1<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;section_back<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>section_back<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>defining<sp/>a<sp/>proximity<sp/>factor:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>section_back_factor</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.<sp/>-<sp/>fmod<sp/>(<sp/>z<sp/>,<sp/><ref refid="classGeometry_1a83cd2f4ce607b1b70227780181b197c6" kindref="member">length</ref>/<sp/>(<sp/><ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref>-1<sp/>)<sp/>)<sp/>/<sp/>(<sp/><ref refid="classGeometry_1a83cd2f4ce607b1b70227780181b197c6" kindref="member">length</ref>/<sp/>(<sp/><ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref>-1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;section_back_factor<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>section_back_factor<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>search<sp/>the<sp/>sector<sp/>where<sp/>it<sp/>lies<sp/>(between<sp/>two<sp/>nodes):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>atan2<sp/>(<sp/>x,y<sp/>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pi<sp/>=<sp/>3.1416;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sector_back<sp/>=<sp/>floor<sp/>(<sp/>(<sp/>theta<sp/>+<sp/>pi<sp/>)<sp/>*<sp/><ref refid="classGeometry_1a5e34644bfae4c1df92cb6bf98a8c62c7" kindref="member">sectors</ref><sp/>/<sp/>(<sp/>2*pi<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;sector_back<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>sector_back<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>defining<sp/>another<sp/>proximity<sp/>factor:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sector_back_factor</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1.<sp/>-<sp/>fmod<sp/>(<sp/>(<sp/>theta<sp/>+<sp/>pi<sp/>)<sp/>*<sp/><ref refid="classGeometry_1a5e34644bfae4c1df92cb6bf98a8c62c7" kindref="member">sectors</ref>,<sp/>(<sp/>2*pi<sp/>)<sp/>)<sp/>/<sp/>(<sp/>2*pi<sp/>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;sector_back_factor<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>sector_back_factor<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>distribute<sp/>the<sp/>energy<sp/>of<sp/>the<sp/>particle<sp/>between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>nodes<sp/>in<sp/>the<sp/>back<sp/>section:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>nodes.size()<sp/>&lt;&lt;<sp/>&quot;,<sp/>trying:<sp/>&quot;<sp/>&lt;&lt;<sp/>section_back*sectors<sp/>+<sp/>sector_back<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>[section_back*sectors<sp/>+<sp/>sector_back]</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;addScalar<sp/>(<sp/>particle_power</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>section_back_factor</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>sector_back_factor</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doing<sp/>the<sp/>same<sp/>for<sp/>the<sp/>next<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sector_front<sp/>=<sp/>sector_back+1;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>got<sp/>into<sp/>the<sp/>last<sp/>node<sp/>of<sp/>the<sp/>section<sp/>(last<sp/>sector)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sector_front<sp/>&gt;=<sp/>sectors<sp/>)<sp/>sector_front<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>around<sp/>singularity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>[section_back*sectors<sp/>+<sp/>sector_front]</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;addScalar<sp/>(<sp/>particle_power</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>section_back_factor</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.-sector_back_factor<sp/>)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>the<sp/>same<sp/>for<sp/>the<sp/>next<sp/>section<sp/>(two<sp/>other<sp/>nodes):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>section_front<sp/>=<sp/>section_back+1;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Repeating<sp/>the<sp/>same:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sector_back<sp/>=<sp/>floor<sp/>(<sp/>(<sp/>theta<sp/>+<sp/>pi<sp/>)<sp/>*<sp/>sectors<sp/>/<sp/>(<sp/>2*pi<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>[section_front*sectors<sp/>+<sp/>sector_back]</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;addScalar<sp/>(<sp/>particle_power</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.-section_back_factor<sp/>)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>sector_back_factor</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(bis)<sp/>Doing<sp/>the<sp/>same<sp/>for<sp/>the<sp/>next<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sector_front<sp/>=<sp/>sector_back+1;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(bis)<sp/>check<sp/>if<sp/>we<sp/>got<sp/>into<sp/>the<sp/>last<sp/>node<sp/>of<sp/>the<sp/>section<sp/>(last<sp/>sector)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sector_front<sp/>&gt;=<sp/>sectors<sp/>)<sp/>sector_front<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>around<sp/>singularity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>nodes.size()<sp/>&lt;&lt;<sp/>&quot;,<sp/>trying:<sp/>&quot;<sp/>&lt;&lt;<sp/>section_front*sectors<sp/>+<sp/>sector_front<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>[section_front*sectors<sp/>+<sp/>sector_front]</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;addScalar<sp/>(<sp/>particle_power</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.-section_back_factor<sp/>)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(<sp/>1.-sector_back_factor<sp/>)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="classOgive_1a5febe7a8e9601801d634067213d5c6f9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOgive_1a5febe7a8e9601801d634067213d5c6f9" kindref="member">Ogive::outputTable</ref>()</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>out<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;top_table.txt&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="classOgive_1a260f5f7945194147784025aaf7fe0a72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOgive_1a260f5f7945194147784025aaf7fe0a72" kindref="member">Ogive::outputPowerFile</ref><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>particles<sp/>)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>outFile<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;total_power.dat&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>power2D,<sp/>z,<sp/>totalPower<sp/>(<sp/>0.<sp/>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sectionDif<sp/>=<sp/><ref refid="classGeometry_1a83cd2f4ce607b1b70227780181b197c6" kindref="member">length</ref><sp/>/<sp/>(<sp/><ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref><sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>outFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>s<sp/>(m)\t<sp/>Power<sp/>(W)\t<sp/>TotalPower<sp/>(W)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i=0;<sp/>i&lt;<ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref>;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>i<sp/>*<sp/>sectionDif;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power2D<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>(length<sp/>-<sp/>z)<sp/>*<sp/>tan(slope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j=0;<sp/>j&lt;<ref refid="classGeometry_1a5e34644bfae4c1df92cb6bf98a8c62c7" kindref="member">sectors</ref>;<sp/>++j<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//closed<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power2D<sp/>+=<sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>[i*sectors<sp/>+<sp/>j]-&gt;getScalar();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalPower<sp/>+=<sp/>power2D;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outFile<sp/>&lt;&lt;<sp/>z/1000.<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>power2D<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>totalPower<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>Power<sp/>*<sp/>particles<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>totalPower<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>Power<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>totalPower<sp/>/<sp/>particles<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MW&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="classOgive_1a0fc6d6890479d78bbf9eab20969698bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classOgive_1a0fc6d6890479d78bbf9eab20969698bc" kindref="member">Ogive::outputPowerDensityFile</ref>()</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>outFile<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;power.dat&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>outFileParts<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;power_particles.dat&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>outFileAnsys<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;Ansys_power_1D.dat&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>power2D,<sp/>z,<sp/>totalPower<sp/>(<sp/>0.<sp/>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sectionDif<sp/>=<sp/><ref refid="classGeometry_1a83cd2f4ce607b1b70227780181b197c6" kindref="member">length</ref><sp/>/<sp/>(<sp/><ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref><sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>outFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>s<sp/>(m)\t<sp/>Power<sp/>Density<sp/>(MW/m^2)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>outFileAnsys<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>s<sp/>(m)\t<sp/>Power<sp/>Density<sp/>(W/m^2)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i=0;<sp/>i&lt;<ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref>;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>i<sp/>*<sp/>sectionDif<sp/>+<sp/><ref refid="classGeometry_1a755ef6125e306d96ba8b4a01f3593b66" kindref="member">z0</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outFileParts<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Section:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>z<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power2D<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>(length<sp/>-<sp/>z)<sp/>*<sp/>tan(slope);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>j=0;<sp/>j&lt;<ref refid="classGeometry_1a5e34644bfae4c1df92cb6bf98a8c62c7" kindref="member">sectors</ref>;<sp/>++j<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//closed<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power2D<sp/>+=<sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>[i*sectors<sp/>+<sp/>j]-&gt;getDensity();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outFileParts<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Node:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i*sectors<sp/>+<sp/>j</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>x<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>[i*sectors<sp/>+<sp/>j]-&gt;getX()</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>y<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>[i*sectors<sp/>+<sp/>j]-&gt;getY()</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>scalar<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>[i*sectors<sp/>+<sp/>j]-&gt;getScalar()</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>density<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classGeometry_1a9f5642ca54e0353b871d733e25ccc56e" kindref="member">nodes</ref>[i*sectors<sp/>+<sp/>j]-&gt;getDensity()</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalPower<sp/>+=<sp/>power2D<sp/>/<sp/>sectors<sp/>/<sp/><ref refid="classGeometry_1a0efc4bf9252077abca96c1c198eefa33" kindref="member">sections</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outFile<sp/>&lt;&lt;<sp/>z/1000.<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>power2D<sp/>/<sp/>sectors<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outFileAnsys<sp/>&lt;&lt;<sp/>z/1000.<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>power2D*1E6<sp/>/<sp/>sectors<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Mean<sp/>Power<sp/>density<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>totalPower<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MW/m^2&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>std::map&lt;<sp/>double,<sp/>std::vector&lt;double&gt;<sp/>&gt;::iterator<sp/>it_powers<sp/>=<sp/>powers.begin();</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Element*<sp/>&gt;::iterator<sp/>it_elements<sp/>=<sp/>elements.begin();</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>connectivity;</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>sectPower,totalPower=0.;</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>outFile(&quot;power.dat&quot;);</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>outFile3D(&quot;power3D.dat&quot;);</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>x,y,z;</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>numberOfnodes<sp/>=<sp/>(*it_elements)-&gt;getNumberOfNodes();<sp/>//<sp/>=<sp/>4</highlight></codeline>
<codeline lineno="374"><highlight class="comment"></highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>outFile3D<sp/>&lt;&lt;<sp/>setiosflags(<sp/>ios::fixed<sp/>);</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;setprecision(10);</highlight></codeline>
<codeline lineno="377"><highlight class="comment"></highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(it_powers<sp/>!=<sp/>powers.end()<sp/>){</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(<sp/>it_powers;</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>it_powers<sp/>!=<sp/>powers.end();</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>++it_powers</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sectPower<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/>sectArea<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=0;<sp/>i&lt;sectors;<sp/>++i){</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>y<sp/>=<sp/>z<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>totalPower<sp/>+=<sp/>it_powers-&gt;second.operator[](i);</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sectPower<sp/>+=<sp/>it_powers-&gt;second.operator[](i)<sp/>/<sp/>(*it_elements)-&gt;getArea();</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sectArea<sp/>+=<sp/>(*it_elements)-&gt;getArea();</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>connectivity<sp/>=<sp/>(*it_elements)-&gt;getConnectivity();</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(<sp/>int<sp/>j=0;<sp/>j&lt;connectivity.size();<sp/>++j<sp/>){</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>connectivity[j]<sp/>&lt;<sp/>nodes.size()<sp/>){</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>(1./numberOfNodes)<sp/>*<sp/>nodes[<sp/>connectivity[j]<sp/>]-&gt;getX();</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>0.25<sp/>*<sp/>nodes[<sp/>connectivity[j]<sp/>]-&gt;getX();</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>0.25<sp/>*<sp/>nodes[<sp/>connectivity[j]<sp/>]-&gt;getY();</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>0.25<sp/>*<sp/>nodes[<sp/>connectivity[j]<sp/>]-&gt;getZ();</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>outFile3D</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>setw(20)<sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/>&quot;\t&quot;</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>setw(20)<sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/>&quot;\t&quot;</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>setw(20)<sp/>&lt;&lt;<sp/>z<sp/>&lt;&lt;<sp/>&quot;\t&quot;</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>setw(20)<sp/>&lt;&lt;<sp/>it_powers-&gt;second.operator[](i)<sp/>/<sp/>(*it_elements)-&gt;getArea()</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>++it_elements;</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sectPower<sp/>/=<sp/>sectors;</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>outFile<sp/>&lt;&lt;<sp/>it_powers-&gt;first<sp/>&lt;&lt;<sp/>&quot;\t&quot;<sp/>&lt;&lt;<sp/>sectPower<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else{<sp/>//<sp/>computed<sp/>by<sp/>theoric<sp/>approach</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Element*<sp/>&gt;::iterator<sp/>it_elements<sp/>=<sp/>elements.begin();</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>connectivity;</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>Node*&gt;::iterator<sp/>it_nodes<sp/>=<sp/>nodes.begin();</highlight></codeline>
<codeline lineno="416"><highlight class="comment"></highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(<sp/>it_elements;</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>it_elements<sp/>!=<sp/>elements.end();</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>++it_elements</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>connectivity<sp/>=<sp/>(*it_elements)-&gt;getConnectivity();</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(<sp/>int<sp/>j=0;<sp/>j&lt;connectivity.size();<sp/>++j<sp/>){</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>totalPower<sp/>+=<sp/>0.25<sp/>*<sp/>nodes[<sp/>connectivity[j]<sp/>]-&gt;getScalar()<sp/>*<sp/>(*it_elements)-&gt;getArea();</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="comment"></highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for(<sp/>it_nodes;</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>it_nodes<sp/>!=<sp/>nodes.end();</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>++it_nodes</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>outFile<sp/>&lt;&lt;<sp/>it_nodes-&gt;second-&gt;getX()<sp/>&lt;&lt;<sp/>&quot;\t&quot;</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>it_nodes-&gt;second-&gt;getY()<sp/>&lt;&lt;<sp/>&quot;\t&quot;</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>it_nodes-&gt;second-&gt;getZ()<sp/>&lt;&lt;<sp/>&quot;\t&quot;</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>it_nodes-&gt;second-&gt;getScalar()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>++it_nodes;<sp/>//get<sp/>only<sp/>even<sp/>nodes</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;TOTAL<sp/>POWER<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>totalPower<sp/>&lt;&lt;<sp/>endl;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/daniel.iglesias/Projects/HeatSurf/src/ogive.cpp"/>
  </compounddef>
</doxygen>
