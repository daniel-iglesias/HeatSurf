<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classlmx_1_1Type__csc" kind="class" prot="public">
    <compoundname>lmx::Type_csc</compoundname>
    <basecompoundref refid="classlmx_1_1Data__mat" prot="public" virt="non-virtual">lmx::Data_mat&lt; T &gt;</basecompoundref>
    <includes refid="lmx__mat__data__blas_8h" local="no">/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_data_blas.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classlmx_1_1Type__csc_1a189ee6941a05a6e49f11e4ddee205ca6" prot="public" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; lmx::Type_csc&lt; T &gt;::aa</definition>
        <argsstring></argsstring>
        <name>aa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classlmx_1_1Matrix" kindref="compound">Matrix</ref> data contents. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="60" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="60" bodyend="-1"/>
        <referencedby refid="namespacelmx_1ab8da9d846c786511bc3954fbbc996ff7" compoundref="lmx__mat__data__blas_8h" startline="281" endline="309">lmx::copy</referencedby>
        <referencedby refid="namespacelmx_1a6d30cefa412621b55332f3521b828010" compoundref="lmx__mat__data__blas_8h" startline="184" endline="211">lmx::mat_vec_mult</referencedby>
        <referencedby refid="classlmx_1_1Type__csc_1aaeb3cfbee5ab97c7eca80812994605f0" compoundref="lmx__mat__type__csc_8h" startline="124" endline="135">lmx::Type_csc&lt; T &gt;::print</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlmx_1_1Type__csc_1ad149a245b902861d26367af5a98d38c2" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &gt;</type>
        <definition>std::vector&lt;size_type&gt; lmx::Type_csc&lt; T &gt;::ia</definition>
        <argsstring></argsstring>
        <name>ia</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Row indexer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="61" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="61" bodyend="-1"/>
        <referencedby refid="namespacelmx_1ab8da9d846c786511bc3954fbbc996ff7" compoundref="lmx__mat__data__blas_8h" startline="281" endline="309">lmx::copy</referencedby>
        <referencedby refid="namespacelmx_1a6d30cefa412621b55332f3521b828010" compoundref="lmx__mat__data__blas_8h" startline="184" endline="211">lmx::mat_vec_mult</referencedby>
        <referencedby refid="classlmx_1_1Type__csc_1aaeb3cfbee5ab97c7eca80812994605f0" compoundref="lmx__mat__type__csc_8h" startline="124" endline="135">lmx::Type_csc&lt; T &gt;::print</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlmx_1_1Type__csc_1a0fec1fc6c8a69fc5727063220d220eee" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &gt;</type>
        <definition>std::vector&lt;size_type&gt; lmx::Type_csc&lt; T &gt;::ja</definition>
        <argsstring></argsstring>
        <name>ja</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Column indexer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="62" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="62" bodyend="-1"/>
        <referencedby refid="namespacelmx_1ab8da9d846c786511bc3954fbbc996ff7" compoundref="lmx__mat__data__blas_8h" startline="281" endline="309">lmx::copy</referencedby>
        <referencedby refid="namespacelmx_1a6d30cefa412621b55332f3521b828010" compoundref="lmx__mat__data__blas_8h" startline="184" endline="211">lmx::mat_vec_mult</referencedby>
        <referencedby refid="classlmx_1_1Type__csc_1aaeb3cfbee5ab97c7eca80812994605f0" compoundref="lmx__mat__type__csc_8h" startline="124" endline="135">lmx::Type_csc&lt; T &gt;::print</referencedby>
        <referencedby refid="classlmx_1_1Type__csc_1a2fe109779f2ba66d3c22abc8483ea7d6" compoundref="lmx__mat__type__csc_8h" startline="185" endline="199">lmx::Type_csc&lt; T &gt;::Type_csc</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlmx_1_1Type__csc_1ade9e149ea4925d6cc97727bbf07f080e" prot="public" static="no" mutable="no">
        <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
        <definition>size_type lmx::Type_csc&lt; T &gt;::Nnze</definition>
        <argsstring></argsstring>
        <name>Nnze</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of non-zero values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="63" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="63" bodyend="-1"/>
        <referencedby refid="namespacelmx_1ab8da9d846c786511bc3954fbbc996ff7" compoundref="lmx__mat__data__blas_8h" startline="281" endline="309">lmx::copy</referencedby>
        <referencedby refid="classlmx_1_1Type__csc_1aaeb3cfbee5ab97c7eca80812994605f0" compoundref="lmx__mat__type__csc_8h" startline="124" endline="135">lmx::Type_csc&lt; T &gt;::print</referencedby>
        <referencedby refid="classlmx_1_1Type__csc_1a2fe109779f2ba66d3c22abc8483ea7d6" compoundref="lmx__mat__type__csc_8h" startline="185" endline="199">lmx::Type_csc&lt; T &gt;::Type_csc</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlmx_1_1Type__csc_1a2c5ef8a3a2cd3a79d7b747f8cace105f" prot="public" static="no" mutable="no">
        <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
        <definition>size_type lmx::Type_csc&lt; T &gt;::Nrow</definition>
        <argsstring></argsstring>
        <name>Nrow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of rows. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="64" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="64" bodyend="-1"/>
        <referencedby refid="namespacelmx_1ab8da9d846c786511bc3954fbbc996ff7" compoundref="lmx__mat__data__blas_8h" startline="281" endline="309">lmx::copy</referencedby>
        <referencedby refid="classlmx_1_1Type__csc_1a2fe109779f2ba66d3c22abc8483ea7d6" compoundref="lmx__mat__type__csc_8h" startline="185" endline="199">lmx::Type_csc&lt; T &gt;::Type_csc</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classlmx_1_1Type__csc_1ac201c80e090b62791f8a95d6f1e3b07c" prot="public" static="no" mutable="no">
        <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
        <definition>size_type lmx::Type_csc&lt; T &gt;::Ncol</definition>
        <argsstring></argsstring>
        <name>Ncol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of columns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="65" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="65" bodyend="-1"/>
        <referencedby refid="namespacelmx_1ab8da9d846c786511bc3954fbbc996ff7" compoundref="lmx__mat__data__blas_8h" startline="281" endline="309">lmx::copy</referencedby>
        <referencedby refid="classlmx_1_1Type__csc_1a2fe109779f2ba66d3c22abc8483ea7d6" compoundref="lmx__mat__type__csc_8h" startline="185" endline="199">lmx::Type_csc&lt; T &gt;::Type_csc</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlmx_1_1Type__csc_1a44403f0bf4980f7246cd614e0cd8bad1" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T lmx::Type_csc&lt; T &gt;::zero</definition>
        <argsstring></argsstring>
        <name>zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="72" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a2915f99c2fab8cca3dd8509d1f5fbb82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lmx::Type_csc&lt; T &gt;::Type_csc</definition>
        <argsstring>()</argsstring>
        <name>Type_csc</name>
        <briefdescription>
<para>Empty constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="75" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="166" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a2fe109779f2ba66d3c22abc8483ea7d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lmx::Type_csc&lt; T &gt;::Type_csc</definition>
        <argsstring>(size_type rows, size_type columns)</argsstring>
        <name>Type_csc</name>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <declname>rows</declname>
        </param>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard constructor. Creates a new object with parameter contents resized to (rows, columns) dimension. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows of H-B matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>columns</parametername>
</parameternamelist>
<parameterdescription>
<para>Columns of H-B matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="77" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="185" bodyend="199"/>
        <references refid="classlmx_1_1Type__csc_1a0fec1fc6c8a69fc5727063220d220eee" compoundref="lmx__mat__type__csc_8h" startline="62">lmx::Type_csc&lt; T &gt;::ja</references>
        <references refid="classlmx_1_1Type__csc_1ac201c80e090b62791f8a95d6f1e3b07c" compoundref="lmx__mat__type__csc_8h" startline="65">lmx::Type_csc&lt; T &gt;::Ncol</references>
        <references refid="classlmx_1_1Type__csc_1ade9e149ea4925d6cc97727bbf07f080e" compoundref="lmx__mat__type__csc_8h" startline="63">lmx::Type_csc&lt; T &gt;::Nnze</references>
        <references refid="classlmx_1_1Type__csc_1a2c5ef8a3a2cd3a79d7b747f8cace105f" compoundref="lmx__mat__type__csc_8h" startline="64">lmx::Type_csc&lt; T &gt;::Nrow</references>
        <references refid="classlmx_1_1Type__csc_1acb0b1a88c3e46d0951c0e03099e33cc2" compoundref="lmx__mat__type__csc_8h" startline="214" endline="276">lmx::Type_csc&lt; T &gt;::resize</references>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a425e938c038cda4f62fe818e41d175d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lmx::Type_csc&lt; T &gt;::~Type_csc</definition>
        <argsstring>()</argsstring>
        <name>~Type_csc</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="79" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1acb0b1a88c3e46d0951c0e03099e33cc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::resize</definition>
        <argsstring>(size_type, size_type)</argsstring>
        <name>resize</name>
        <reimplements refid="classlmx_1_1Data_1a2ef906e5218e1bc6d4df355787caedfc">resize</reimplements>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <defname>mrows</defname>
        </param>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <defname>ncolumns</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize method. Changes the size of the sparse matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mrows</parametername>
</parameternamelist>
<parameterdescription>
<para>New value for rows of matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncolumns</parametername>
</parameternamelist>
<parameterdescription>
<para>New value for columns of matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="81" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="214" bodyend="276"/>
        <referencedby refid="classlmx_1_1Type__csc_1a2fe109779f2ba66d3c22abc8483ea7d6" compoundref="lmx__mat__type__csc_8h" startline="185" endline="199">lmx::Type_csc&lt; T &gt;::Type_csc</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1aaa74136864d441799168b4568f697d53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; lmx::Type_csc&lt; T &gt;::readElement</definition>
        <argsstring>(const size_type &amp;mrows, const size_type &amp;ncolumns) const </argsstring>
        <name>readElement</name>
        <reimplements refid="classlmx_1_1Data_1a25cffd2f6d220d24e37b37a96205e0be">readElement</reimplements>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>mrows</declname>
        </param>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>ncolumns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read element method. Implements a method for reading data of the Harwell-Boeing matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mrows</parametername>
</parameternamelist>
<parameterdescription>
<para>Row position in Harwell-Boeing matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncolumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Column position in Harwell-Boeing matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of the element in the position given by the parameters. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="83" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="287" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a814cd964f39fa41feffbf0795d3e446d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::writeElement</definition>
        <argsstring>(T value, const size_type &amp;mrows, const size_type &amp;ncolumns)</argsstring>
        <name>writeElement</name>
        <reimplements refid="classlmx_1_1Data_1a41a4d2e19d1e150caff0d2011113f0fd">writeElement</reimplements>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>mrows</declname>
        </param>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>ncolumns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write element method. Implements a method for writing data on the Harwell-Boeing matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mrows</parametername>
</parameternamelist>
<parameterdescription>
<para>Row position in Harwell-Boeing matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncolumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Column position in Harwell-Boeing matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical type value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="85" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="311" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1aec6ca35c9a16d33a6ec7e4754f0cfe0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::addElement</definition>
        <argsstring>(T value, const size_type &amp;mrows, const size_type &amp;ncolumns)</argsstring>
        <name>addElement</name>
        <reimplements refid="classlmx_1_1Data_1ab99ee708ee4e9553be431d408eb2b43a">addElement</reimplements>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>mrows</declname>
        </param>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>ncolumns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add element method. Implements a method for adding data on the Harwell-Boeing matrix. Copy-pasted from writeElement. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mrows</parametername>
</parameternamelist>
<parameterdescription>
<para>Row position in Harwell-Boeing matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncolumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Column position in Harwell-Boeing matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical type value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="87" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="341" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1ac69045358a8d2b699ce32333f43f58e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T * lmx::Type_csc&lt; T &gt;::create_element</definition>
        <argsstring>(size_type, size_type)</argsstring>
        <name>create_element</name>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <defname>mrows</defname>
        </param>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <defname>ncolumns</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create element method. Implements a method for creating a new data position in matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mrows</parametername>
</parameternamelist>
<parameterdescription>
<para>Row position in Harwell-Boeing matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncolumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Column position in Harwell-Boeing matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the element in the position given by the parameters. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="89" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="370" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a7d04d6b93337ead44534da43fb5d2b40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
        <definition>size_type lmx::Type_csc&lt; T &gt;::getRows</definition>
        <argsstring>() const </argsstring>
        <name>getRows</name>
        <reimplements refid="classlmx_1_1Data_1a819b220b738028a01c5f861d059dd802">getRows</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for knowing the number of data rows. <simplesect kind="return"><para>Number of rows. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="91" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="415" bodyend="418"/>
        <referencedby refid="namespacelmx_1ab8da9d846c786511bc3954fbbc996ff7" compoundref="lmx__mat__data__blas_8h" startline="281" endline="309">lmx::copy</referencedby>
        <referencedby refid="namespacelmx_1a6d30cefa412621b55332f3521b828010" compoundref="lmx__mat__data__blas_8h" startline="184" endline="211">lmx::mat_vec_mult</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1adc1754239031a024f0126008cca8257c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
        <definition>size_type lmx::Type_csc&lt; T &gt;::getCols</definition>
        <argsstring>() const </argsstring>
        <name>getCols</name>
        <reimplements refid="classlmx_1_1Data_1a7dc130d0eba4c4d1dc4ce6e9a371251c">getCols</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for knowing the number of data columns. <simplesect kind="return"><para>Number of columns. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="93" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="425" bodyend="428"/>
        <referencedby refid="namespacelmx_1ab8da9d846c786511bc3954fbbc996ff7" compoundref="lmx__mat__data__blas_8h" startline="281" endline="309">lmx::copy</referencedby>
        <referencedby refid="namespacelmx_1a6d30cefa412621b55332f3521b828010" compoundref="lmx__mat__data__blas_8h" startline="184" endline="211">lmx::mat_vec_mult</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a149e8f0b1846fcc5e7731d75f0ab8401" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::equals</definition>
        <argsstring>(const Data&lt; T &gt; *matrix_in)</argsstring>
        <name>equals</name>
        <reimplements refid="classlmx_1_1Data_1a26ed4e8b9ba60ee57fc729e4cfcad356">equals</reimplements>
        <param>
          <type>const <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>&lt; T &gt; *</type>
          <declname>matrix_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy method. Equals the data in the object&apos;s contents to those given by the input matrix parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix_in</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an object that belongs to a class derived from <ref refid="classlmx_1_1Data__mat" kindref="compound">Data_mat</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="95" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="437" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1ab81fb9afcee4f795aaed31383d484612" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::add</definition>
        <argsstring>(const Data&lt; T &gt; *matrix_in_1)</argsstring>
        <name>add</name>
        <reimplements refid="classlmx_1_1Data_1a7e09e2e81661176a36eb82818610223a">add</reimplements>
        <param>
          <type>const <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>&lt; T &gt; *</type>
          <declname>matrix_in_1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add method. Adds the the input matrix parameter&apos;s elements to the object&apos;s contents. Necessary for overloading the &quot;+=&quot; operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix_in_1</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an object that belongs to a class derived from <ref refid="classlmx_1_1Data__mat" kindref="compound">Data_mat</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="97" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="454" bodyend="462"/>
        <references refid="classlmx_1_1Data_1a25cffd2f6d220d24e37b37a96205e0be">lmx::Data&lt; T &gt;::readElement</references>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a933efcd2ae77ca2460a0e27dff8d8798" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::substract</definition>
        <argsstring>(const Data&lt; T &gt; *matrix_in_1)</argsstring>
        <name>substract</name>
        <reimplements refid="classlmx_1_1Data_1aab240114cfc6ba8f342cc7154dcb298d">substract</reimplements>
        <param>
          <type>const <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>&lt; T &gt; *</type>
          <declname>matrix_in_1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Substract method. Substracts the the input matrix parameter&apos;s elements to the object&apos;s contents. Necessary for overloading the &quot;-=&quot; operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix_in_1</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an object that belongs to a class derived from <ref refid="classlmx_1_1Data__mat" kindref="compound">Data_mat</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="99" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="471" bodyend="479"/>
        <references refid="classlmx_1_1Data_1a25cffd2f6d220d24e37b37a96205e0be">lmx::Data&lt; T &gt;::readElement</references>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a5f2764badb799b42b956cb6bd384b55f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::multiply</definition>
        <argsstring>(const Data&lt; T &gt; *matrix_in_1, const Data&lt; T &gt; *matrix_in_2)</argsstring>
        <name>multiply</name>
        <reimplements refid="classlmx_1_1Data__mat_1a850c5fadc5139992f32bf15316309b52">multiply</reimplements>
        <param>
          <type>const <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>&lt; T &gt; *</type>
          <declname>matrix_in_1</declname>
        </param>
        <param>
          <type>const <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>&lt; T &gt; *</type>
          <declname>matrix_in_2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply method. Multiplies the input matrices and saves the result into the object&apos;s contents. Necessary for overloading the &quot;*&quot; operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix_in_1</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an object that belongs to a class derived from <ref refid="classlmx_1_1Data__mat" kindref="compound">Data_mat</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matrix_in_2</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an object that belongs to a class derived from <ref refid="classlmx_1_1Data__mat" kindref="compound">Data_mat</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="101" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="489" bodyend="507"/>
        <references refid="classlmx_1_1Data_1a7dc130d0eba4c4d1dc4ce6e9a371251c">lmx::Data&lt; T &gt;::getCols</references>
        <references refid="classlmx_1_1Data_1a819b220b738028a01c5f861d059dd802">lmx::Data&lt; T &gt;::getRows</references>
        <references refid="classlmx_1_1Data_1a25cffd2f6d220d24e37b37a96205e0be">lmx::Data&lt; T &gt;::readElement</references>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1ad963bfd1f5e2cb5d524a15cac334afc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::multiplyScalar</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>multiplyScalar</name>
        <reimplements refid="classlmx_1_1Data_1a027c8e7cb440f16a828579acaf991262">multiplyScalar</reimplements>
        <param>
          <type>const T &amp;</type>
          <defname>scalar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply scalar method. Multiplies the object&apos;s matrix (contents) with a scalar. Necessary for overloading the &quot;*&quot; operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>A scalar factor of template&apos;s class. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="103" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="516" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1ac6270f91b6bffab66a8bf4f5bcd26ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::multiplyElements</definition>
        <argsstring>(const Data&lt; T &gt; *matrix_in)</argsstring>
        <name>multiplyElements</name>
        <reimplements refid="classlmx_1_1Data_1a89fd82cd33955de1ee375a9d514f2860">multiplyElements</reimplements>
        <param>
          <type>const <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>&lt; T &gt; *</type>
          <declname>matrix_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method multiplying element-by-element of two matrices. One would be the object&apos;s contents and the other the parameter&apos;s contents.</para><para>Necessary for implementing <ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref> to <ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref> multElements.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix_in</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an object that belongs to a class derived from <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="105" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="533" bodyend="544"/>
        <references refid="classlmx_1_1Data_1a25cffd2f6d220d24e37b37a96205e0be">lmx::Data&lt; T &gt;::readElement</references>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a77e01d8d8334bd448028d75c33e72f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::trn</definition>
        <argsstring>()</argsstring>
        <name>trn</name>
        <reimplements refid="classlmx_1_1Data__mat_1aace5fad359799ebcd14dd79c458b340e">trn</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Traspose method. Swaps elements with respect to the diagonal: A(i,j) = A(j,i) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="107" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="552" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a7a5cbf46b6fe051d10586b6f6b5cf244" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::cleanBelow</definition>
        <argsstring>(const double factor)</argsstring>
        <name>cleanBelow</name>
        <reimplements refid="classlmx_1_1Data_1a706e90ec786d6133dd69edcbc6b37845">cleanBelow</reimplements>
        <param>
          <type>const double</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clean below method. Makes equal to zero every element below given factor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference value for cleaning. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="109" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="620" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a2c85d71b10223e2da91e947739cd5e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <reimplements refid="classlmx_1_1Data_1abab7ff41198c0fab10e2a7d739e47ecb">clear</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear method. Wipes all data, clearing column, row and data vectors. </para>        </detaileddescription>
        <inbodydescription>
<para>&lt; <ref refid="classlmx_1_1Matrix" kindref="compound">Matrix</ref> data contents.</para><para>&lt; Row indexer.</para><para>&lt; Column indexer.</para><para>&lt; Number of non-zero values. </para>        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="111" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="632" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a9a5a413641307bc2229b79b46f9b43a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <reimplements refid="classlmx_1_1Data_1a2d275a49db8c274e26b1d3bcbc23d964">reset</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="114" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="645" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1adf2926b0afd5a318fdc730225d10d2aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::read_mm_file</definition>
        <argsstring>(const char *input_file)</argsstring>
        <name>read_mm_file</name>
        <reimplements refid="classlmx_1_1Data__mat_1afd492bb04f83b8b96b5964834436290a">read_mm_file</reimplements>
        <param>
          <type>const char *</type>
          <declname>input_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read data in <ref refid="classlmx_1_1Matrix" kindref="compound">Matrix</ref> Market format method. Opens the file specified and reads the matrix&apos;s data in it, suposing it&apos;s stored in <ref refid="classlmx_1_1Matrix" kindref="compound">Matrix</ref> Market format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to be read. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="117" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="659" bodyend="695"/>
        <references refid="namespacelmx_1ab8da9d846c786511bc3954fbbc996ff7" compoundref="lmx__mat__data__blas_8h" startline="281" endline="309">lmx::copy</references>
        <references refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" compoundref="lmx__except_8h" startline="253">LMX_THROW</references>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a167170de05513c15944e09722a29d699" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::read_hb_file</definition>
        <argsstring>(const char *input_file)</argsstring>
        <name>read_hb_file</name>
        <reimplements refid="classlmx_1_1Data__mat_1add96428335bb5119c7f5126ebb07fb10">read_hb_file</reimplements>
        <param>
          <type>const char *</type>
          <declname>input_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read data in Harwell-Boeing format method. Opens the file specified and reads the matrix&apos;s data in it, suposing it&apos;s stored in Harwell-Boeing format.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to be read. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="119" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="705" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a9b9007bdd388c37f469496d940be9416" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::write_hb_file</definition>
        <argsstring>(const char *input_file)</argsstring>
        <name>write_hb_file</name>
        <reimplements refid="classlmx_1_1Data__mat_1adbbffb805ce19ca7e9d2a2f70d0f7bcd">write_hb_file</reimplements>
        <param>
          <type>const char *</type>
          <declname>input_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write data in Harwell-Boeing format method. Opens the file specified and writes the matrix&apos;s data in it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to be read. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="121" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="743" bodyend="780"/>
        <references refid="lmx__except_8h_1a9f35b13bd70815809cc47f5c93a29a3b" compoundref="lmx__except_8h" startline="253">LMX_THROW</references>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1aaeb3cfbee5ab97c7eca80812994605f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::print</definition>
        <argsstring>()</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function for testing purposes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="124" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="124" bodyend="135"/>
        <references refid="classlmx_1_1Type__csc_1a189ee6941a05a6e49f11e4ddee205ca6" compoundref="lmx__mat__type__csc_8h" startline="60">lmx::Type_csc&lt; T &gt;::aa</references>
        <references refid="classlmx_1_1Type__csc_1ad149a245b902861d26367af5a98d38c2" compoundref="lmx__mat__type__csc_8h" startline="61">lmx::Type_csc&lt; T &gt;::ia</references>
        <references refid="classlmx_1_1Type__csc_1a0fec1fc6c8a69fc5727063220d220eee" compoundref="lmx__mat__type__csc_8h" startline="62">lmx::Type_csc&lt; T &gt;::ja</references>
        <references refid="classlmx_1_1Type__csc_1ade9e149ea4925d6cc97727bbf07f080e" compoundref="lmx__mat__type__csc_8h" startline="63">lmx::Type_csc&lt; T &gt;::Nnze</references>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1af7a2ce6b3c1f7221759e5714be2a6ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool lmx::Type_csc&lt; T &gt;::exists</definition>
        <argsstring>(size_type, size_type)</argsstring>
        <name>exists</name>
        <reimplements refid="classlmx_1_1Data__mat_1aec8ef2dab6c85ad0461718eb2aafe6ae">exists</reimplements>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <defname>mrows</defname>
        </param>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <defname>ncolumns</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns TRUE or FALSE depending of element existance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mrows</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncolumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Column index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the element exists in internal storage structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="137" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="791" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a3a9e534d84a2cf1265adfe87087904b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::setSparsePattern</definition>
        <argsstring>(Vector&lt; size_type &gt; &amp;, Vector&lt; size_type &gt; &amp;)</argsstring>
        <name>setSparsePattern</name>
        <reimplements refid="classlmx_1_1Data__mat_1ac599c952372bc78b03c01ed4c7ed5094">setSparsePattern</reimplements>
        <param>
          <type><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &gt; &amp;</type>
          <defname>row_index</defname>
        </param>
        <param>
          <type><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &gt; &amp;</type>
          <defname>col_index</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepares the sparse structure of a CSC matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row_index</parametername>
</parameternamelist>
<parameterdescription>
<para>CSC row indices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col_index</parametername>
</parameternamelist>
<parameterdescription>
<para>CSC columns indices. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="139" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="817" bodyend="831"/>
        <references refid="classlmx_1_1Vector_1a35fcd4c3141584163b295f0f28102e57" compoundref="lmx__mat__vector_8h" startline="89" endline="89">lmx::Vector&lt; T &gt;::size</references>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a0d71c07fe7b4ded4eb8c4d70e8e21117" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::setSparsePattern</definition>
        <argsstring>(std::vector&lt; size_type &gt; &amp;, std::vector&lt; size_type &gt; &amp;)</argsstring>
        <name>setSparsePattern</name>
        <reimplements refid="classlmx_1_1Data__mat_1a58692a61f0d7b7c5c74225800a30da91">setSparsePattern</reimplements>
        <param>
          <type>std::vector&lt; <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &gt; &amp;</type>
          <defname>row_index</defname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &gt; &amp;</type>
          <defname>col_index</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepares the sparse structure of a CSC matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row_index</parametername>
</parameternamelist>
<parameterdescription>
<para>CSC row indices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col_index</parametername>
</parameternamelist>
<parameterdescription>
<para>CSC columns indices. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="141" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="839" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1aded0c22ffd28b30e5e447107fbdb5864" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::initSLU</definition>
        <argsstring>()</argsstring>
        <name>initSLU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="150" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1acd31af597828197da686efaecc0b2cb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::factorize</definition>
        <argsstring>()</argsstring>
        <name>factorize</name>
        <reimplements refid="classlmx_1_1Data__mat_1a1b94e36086c4c181f8001f277ed89bbf">factorize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="152" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__csc_1a7b4cf55fb69d0bc365e41c47eee0a676" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_csc&lt; T &gt;::subsSolve</definition>
        <argsstring>(Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>subsSolve</name>
        <reimplements refid="classlmx_1_1Data__mat_1a8401959d4f7f008144de038293e24d5e">subsSolve</reimplements>
        <param>
          <type><ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="154" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" bodystart="154" bodyend="154"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classlmx_1_1Type__csc_1aaf433432afb39beb3a3908942731530e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void mat_vec_mult</definition>
        <argsstring>(const Type_csc&lt; T &gt; *, const Type_stdVector&lt; T &gt; *, Type_stdVector&lt; T &gt; *)</argsstring>
        <name>mat_vec_mult</name>
        <param>
          <type>const <ref refid="classlmx_1_1Type__csc" kindref="compound">Type_csc</ref>&lt; T &gt; *</type>
          <defname>matrix_in</defname>
        </param>
        <param>
          <type>const <ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref>&lt; T &gt; *</type>
          <defname>vector_in</defname>
        </param>
        <param>
          <type><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref>&lt; T &gt; *</type>
          <defname>vector_out</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classlmx_1_1Matrix" kindref="compound">Matrix</ref> vector (pre)multiplication, specialized for <ref refid="classlmx_1_1Type__csc" kindref="compound">Type_csc</ref> <ref refid="classlmx_1_1Data__mat" kindref="compound">Data_mat</ref> (matrix) and <ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref> (STL vector) formats. Calculates the product A*b = c using pointers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix_in</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlmx_1_1Type__csc" kindref="compound">Type_csc</ref> *Matrix A. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector_in</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref> *Vector b. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector_out</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref> *Vector c = A*b. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_csc.h" line="158" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_data_blas.h" bodystart="184" bodyend="211"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Compressed Storaged by Columns matrix. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Roberto Ortega </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="457">
        <label>lmx::Data_mat&lt; T &gt;</label>
        <link refid="classlmx_1_1Data__mat"/>
        <childnode refid="458" relation="public-inheritance">
        </childnode>
      </node>
      <node id="458">
        <label>lmx::Data&lt; T &gt;</label>
        <link refid="classlmx_1_1Data"/>
      </node>
      <node id="456">
        <label>lmx::Type_csc&lt; T &gt;</label>
        <link refid="classlmx_1_1Type__csc"/>
        <childnode refid="457" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="460">
        <label>lmx::Data_mat&lt; T &gt;</label>
        <link refid="classlmx_1_1Data__mat"/>
        <childnode refid="461" relation="public-inheritance">
        </childnode>
      </node>
      <node id="461">
        <label>lmx::Data&lt; T &gt;</label>
        <link refid="classlmx_1_1Data"/>
      </node>
      <node id="459">
        <label>lmx::Type_csc&lt; T &gt;</label>
        <link refid="classlmx_1_1Type__csc"/>
        <childnode refid="460" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_data_blas.h" line="50" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_data_blas.h" bodystart="50" bodyend="-1"/>
    <listofallmembers>
      <member refid="classlmx_1_1Type__csc_1a189ee6941a05a6e49f11e4ddee205ca6" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>aa</name></member>
      <member refid="classlmx_1_1Type__csc_1ab81fb9afcee4f795aaed31383d484612" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>add</name></member>
      <member refid="classlmx_1_1Type__csc_1aec6ca35c9a16d33a6ec7e4754f0cfe0b" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>addElement</name></member>
      <member refid="classlmx_1_1Type__csc_1a7a5cbf46b6fe051d10586b6f6b5cf244" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>cleanBelow</name></member>
      <member refid="classlmx_1_1Type__csc_1a2c85d71b10223e2da91e947739cd5e67" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>clear</name></member>
      <member refid="classlmx_1_1Type__csc_1ac69045358a8d2b699ce32333f43f58e0" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>create_element</name></member>
      <member refid="classlmx_1_1Data_1a9a0de5654dd527cac01f2dc52df86298" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>Data</name></member>
      <member refid="classlmx_1_1Data__mat_1a03e90b0b3053c99ef6d2e183d763511e" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>Data_mat</name></member>
      <member refid="classlmx_1_1Type__csc_1a149e8f0b1846fcc5e7731d75f0ab8401" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>equals</name></member>
      <member refid="classlmx_1_1Type__csc_1af7a2ce6b3c1f7221759e5714be2a6ab2" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>exists</name></member>
      <member refid="classlmx_1_1Type__csc_1acd31af597828197da686efaecc0b2cb7" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>factorize</name></member>
      <member refid="classlmx_1_1Type__csc_1adc1754239031a024f0126008cca8257c" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>getCols</name></member>
      <member refid="classlmx_1_1Type__csc_1a7d04d6b93337ead44534da43fb5d2b40" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>getRows</name></member>
      <member refid="classlmx_1_1Type__csc_1ad149a245b902861d26367af5a98d38c2" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>ia</name></member>
      <member refid="classlmx_1_1Type__csc_1aded0c22ffd28b30e5e447107fbdb5864" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>initSLU</name></member>
      <member refid="classlmx_1_1Type__csc_1a0fec1fc6c8a69fc5727063220d220eee" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>ja</name></member>
      <member refid="classlmx_1_1Type__csc_1aaf433432afb39beb3a3908942731530e" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>mat_vec_mult</name></member>
      <member refid="classlmx_1_1Type__csc_1a5f2764badb799b42b956cb6bd384b55f" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>multiply</name></member>
      <member refid="classlmx_1_1Type__csc_1ac6270f91b6bffab66a8bf4f5bcd26ab9" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>multiplyElements</name></member>
      <member refid="classlmx_1_1Type__csc_1ad963bfd1f5e2cb5d524a15cac334afc4" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>multiplyScalar</name></member>
      <member refid="classlmx_1_1Type__csc_1ac201c80e090b62791f8a95d6f1e3b07c" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>Ncol</name></member>
      <member refid="classlmx_1_1Type__csc_1ade9e149ea4925d6cc97727bbf07f080e" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>Nnze</name></member>
      <member refid="classlmx_1_1Type__csc_1a2c5ef8a3a2cd3a79d7b747f8cace105f" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>Nrow</name></member>
      <member refid="classlmx_1_1Type__csc_1aaeb3cfbee5ab97c7eca80812994605f0" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>print</name></member>
      <member refid="classlmx_1_1Type__csc_1a167170de05513c15944e09722a29d699" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>read_hb_file</name></member>
      <member refid="classlmx_1_1Type__csc_1adf2926b0afd5a318fdc730225d10d2aa" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>read_mm_file</name></member>
      <member refid="classlmx_1_1Type__csc_1aaa74136864d441799168b4568f697d53" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>readElement</name></member>
      <member refid="classlmx_1_1Type__csc_1a9a5a413641307bc2229b79b46f9b43a8" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>reset</name></member>
      <member refid="classlmx_1_1Type__csc_1acb0b1a88c3e46d0951c0e03099e33cc2" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>resize</name></member>
      <member refid="classlmx_1_1Type__csc_1a3a9e534d84a2cf1265adfe87087904b6" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>setSparsePattern</name></member>
      <member refid="classlmx_1_1Type__csc_1a0d71c07fe7b4ded4eb8c4d70e8e21117" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>setSparsePattern</name></member>
      <member refid="classlmx_1_1Type__csc_1a7b4cf55fb69d0bc365e41c47eee0a676" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>subsSolve</name></member>
      <member refid="classlmx_1_1Type__csc_1a933efcd2ae77ca2460a0e27dff8d8798" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>substract</name></member>
      <member refid="classlmx_1_1Type__csc_1a77e01d8d8334bd448028d75c33e72f7f" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>trn</name></member>
      <member refid="classlmx_1_1Type__csc_1a2915f99c2fab8cca3dd8509d1f5fbb82" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>Type_csc</name></member>
      <member refid="classlmx_1_1Type__csc_1a2fe109779f2ba66d3c22abc8483ea7d6" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>Type_csc</name></member>
      <member refid="classlmx_1_1Type__csc_1a9b9007bdd388c37f469496d940be9416" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>write_hb_file</name></member>
      <member refid="classlmx_1_1Type__csc_1a814cd964f39fa41feffbf0795d3e446d" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>writeElement</name></member>
      <member refid="classlmx_1_1Type__csc_1a44403f0bf4980f7246cd614e0cd8bad1" prot="private" virt="non-virtual"><scope>lmx::Type_csc</scope><name>zero</name></member>
      <member refid="classlmx_1_1Data_1a74768723b5fb7c7eb5f26232b61ba02d" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>~Data</name></member>
      <member refid="classlmx_1_1Data__mat_1a0c57d9772b2eccf6f796e60f1e156964" prot="public" virt="virtual"><scope>lmx::Type_csc</scope><name>~Data_mat</name></member>
      <member refid="classlmx_1_1Type__csc_1a425e938c038cda4f62fe818e41d175d5" prot="public" virt="non-virtual"><scope>lmx::Type_csc</scope><name>~Type_csc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
