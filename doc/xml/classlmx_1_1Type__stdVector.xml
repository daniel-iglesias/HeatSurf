<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classlmx_1_1Type__stdVector" kind="class" prot="public">
    <compoundname>lmx::Type_stdVector</compoundname>
    <basecompoundref refid="classlmx_1_1Data__vec" prot="public" virt="non-virtual">lmx::Data_vec&lt; T &gt;</basecompoundref>
    <includes refid="lmx__mat__data__blas_8h" local="no">/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_data_blas.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlmx_1_1Type__stdVector_1ab9526f0caa59c0247d704a7f677436fd" prot="private" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; lmx::Type_stdVector&lt; T &gt;::contents</definition>
        <argsstring></argsstring>
        <name>contents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classlmx_1_1Matrix" kindref="compound">Matrix</ref> data contents </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="58" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a39dd4cbb3292f5319a8915ccf56598e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lmx::Type_stdVector&lt; T &gt;::Type_stdVector</definition>
        <argsstring>()</argsstring>
        <name>Type_stdVector</name>
        <briefdescription>
<para>Empty constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="62" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a74cd5d86073824fc5bd9e7d1b52eeaa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lmx::Type_stdVector&lt; T &gt;::Type_stdVector</definition>
        <argsstring>(size_type, size_type)</argsstring>
        <name>Type_stdVector</name>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <defname>rows</defname>
        </param>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <defname>columns</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Standard constructor.</para><para>Creates a new object with parameter contents resized to (columns) dimension. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Rows of dense stdVector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>columns</parametername>
</parameternamelist>
<parameterdescription>
<para>Not used. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="64" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a8ac268697637315c95a3c39ec482c2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lmx::Type_stdVector&lt; T &gt;::Type_stdVector</definition>
        <argsstring>(char *)</argsstring>
        <name>Type_stdVector</name>
        <param>
          <type>char *</type>
          <defname>input_file</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor from a data file. Creates a new object reading data from a file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of file to read from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="66" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="295" bodyend="298"/>
        <references refid="classlmx_1_1Type__stdVector_1a9147f2967ac55a22a91640297292d240" compoundref="lmx__mat__type__stdvector_8h" startline="193" endline="218">lmx::Type_stdVector&lt; T &gt;::readDataFile</references>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1ae78b26a36d536162d1ba8ea634850d23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lmx::Type_stdVector&lt; T &gt;::~Type_stdVector</definition>
        <argsstring>()</argsstring>
        <name>~Type_stdVector</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="69" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a727c040e4adaf13abc799c4fcef971b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::resize</definition>
        <argsstring>(size_type mrows, size_type ncolumns)</argsstring>
        <name>resize</name>
        <reimplements refid="classlmx_1_1Data_1a2ef906e5218e1bc6d4df355787caedfc">resize</reimplements>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <declname>mrows</declname>
        </param>
        <param>
          <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
          <declname>ncolumns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize method. Changes the size of the contents parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mrows</parametername>
</parameternamelist>
<parameterdescription>
<para>New value for vector&apos;s size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncolumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Not used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="76" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="76" bodyend="77"/>
        <referencedby refid="classlmx_1_1Type__stdVector_1a9147f2967ac55a22a91640297292d240" compoundref="lmx__mat__type__stdvector_8h" startline="193" endline="218">lmx::Type_stdVector&lt; T &gt;::readDataFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a9bd94cc0b965732f66f0f55d72b7cd06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; lmx::Type_stdVector&lt; T &gt;::readElement</definition>
        <argsstring>(const size_type &amp;mrows, const size_type &amp;ncolumns) const </argsstring>
        <name>readElement</name>
        <reimplements refid="classlmx_1_1Data_1a25cffd2f6d220d24e37b37a96205e0be">readElement</reimplements>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>mrows</declname>
        </param>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>ncolumns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read element method. Implements a method for reading vector&apos;s data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mrows</parametername>
</parameternamelist>
<parameterdescription>
<para>Row position in dense matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncolumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Column position in dense matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of the element in the position given by the parameter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="85" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="85" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a70b59a584946a3bf78a3bf93e33521f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::writeElement</definition>
        <argsstring>(T value, const size_type &amp;mrows, const size_type &amp;ncolumns)</argsstring>
        <name>writeElement</name>
        <reimplements refid="classlmx_1_1Data_1a41a4d2e19d1e150caff0d2011113f0fd">writeElement</reimplements>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>mrows</declname>
        </param>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>ncolumns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write element method. Implements a method for writing data on the dense matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mrows</parametername>
</parameternamelist>
<parameterdescription>
<para>Row position in dense matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncolumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Column position in dense matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical type value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="93" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="93" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1ab5efd225785a7c2d358762c3a41044d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::addElement</definition>
        <argsstring>(T value, const size_type &amp;mrows, const size_type &amp;ncolumns)</argsstring>
        <name>addElement</name>
        <reimplements refid="classlmx_1_1Data_1ab99ee708ee4e9553be431d408eb2b43a">addElement</reimplements>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>mrows</declname>
        </param>
        <param>
          <type>const <ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref> &amp;</type>
          <declname>ncolumns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add element method. Implements a method for adding data on the Harwell-Boeing matrix. Copy-pasted from writeElement. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mrows</parametername>
</parameternamelist>
<parameterdescription>
<para>Row position in dense matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncolumns</parametername>
</parameternamelist>
<parameterdescription>
<para>Column position in dense matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerical type value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="102" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="102" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1adbbad4029937203d528c2f267174ea3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
        <definition>size_type lmx::Type_stdVector&lt; T &gt;::getRows</definition>
        <argsstring>() const </argsstring>
        <name>getRows</name>
        <reimplements refid="classlmx_1_1Data_1a819b220b738028a01c5f861d059dd802">getRows</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for knowing the number of data rows. <simplesect kind="return"><para>Number of rows. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="108" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="108" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1adbc15d4db8a1f72e044a3250359e18eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref></type>
        <definition>size_type lmx::Type_stdVector&lt; T &gt;::getCols</definition>
        <argsstring>() const </argsstring>
        <name>getCols</name>
        <reimplements refid="classlmx_1_1Data_1a7dc130d0eba4c4d1dc4ce6e9a371251c">getCols</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for knowing the number of data columns. <simplesect kind="return"><para>Number of columns. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="114" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="114" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a7f24603798a29e4d13c0a9eae926ba04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::equals</definition>
        <argsstring>(const Data&lt; T &gt; *vector_in)</argsstring>
        <name>equals</name>
        <reimplements refid="classlmx_1_1Data_1a26ed4e8b9ba60ee57fc729e4cfcad356">equals</reimplements>
        <param>
          <type>const <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>&lt; T &gt; *</type>
          <declname>vector_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy method. Equals the data in the object&apos;s contents to those given by the input vector&apos;s parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector_in</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an object that belongs to a class derived from <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="120" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1accae3e1fa0fd9cc7b5968a3bf73034fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::add</definition>
        <argsstring>(const Data&lt; T &gt; *vector_in_1)</argsstring>
        <name>add</name>
        <reimplements refid="classlmx_1_1Data_1a7e09e2e81661176a36eb82818610223a">add</reimplements>
        <param>
          <type>const <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>&lt; T &gt; *</type>
          <declname>vector_in_1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add method. Adds the the input vector parameter&apos;s elements to the object&apos;s contents. Necessary for overloading the &quot;+=&quot; operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector_in_1</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an object that belongs to a class derived from <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="130" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="130" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a7b246366659974874a46bf0424b3fd99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::substract</definition>
        <argsstring>(const Data&lt; T &gt; *vector_in_1)</argsstring>
        <name>substract</name>
        <reimplements refid="classlmx_1_1Data_1aab240114cfc6ba8f342cc7154dcb298d">substract</reimplements>
        <param>
          <type>const <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>&lt; T &gt; *</type>
          <declname>vector_in_1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Substract method. Substracts the the input vector parameter&apos;s elements to the object&apos;s contents. Necessary for overloading the &quot;-=&quot; operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector_in_1</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an object that belongs to a class derived from <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="145" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="145" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a026f616e7a626ab3935f90779b06d36e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::multiplyScalar</definition>
        <argsstring>(const T &amp;scalar)</argsstring>
        <name>multiplyScalar</name>
        <reimplements refid="classlmx_1_1Data_1a027c8e7cb440f16a828579acaf991262">multiplyScalar</reimplements>
        <param>
          <type>const T &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply scalar method. Multiplies the object&apos;s vector (contents) with a scalar. Necessary for overloading the &quot;*&quot; operator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>A scalar factor of template&apos;s class. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="156" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="156" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a7bc99c10ee6a2905f7705598459f0101" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::multiplyElements</definition>
        <argsstring>(const Data&lt; T &gt; *vector_in)</argsstring>
        <name>multiplyElements</name>
        <reimplements refid="classlmx_1_1Data_1a89fd82cd33955de1ee375a9d514f2860">multiplyElements</reimplements>
        <param>
          <type>const <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>&lt; T &gt; *</type>
          <declname>vector_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method multiplying element-by-element of two arrays. One would be the object&apos;s contents and the other the parameter&apos;s contents. Necessary for implementing <ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref> to <ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref> multElements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector_in</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an object that belongs to a class derived from <ref refid="classlmx_1_1Data" kindref="compound">Data</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="166" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="166" bodyend="170"/>
        <references refid="classlmx_1_1Data_1a25cffd2f6d220d24e37b37a96205e0be">lmx::Data&lt; T &gt;::readElement</references>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a85e5d2f3e6c22b833c12c2c9bf45660f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::cleanBelow</definition>
        <argsstring>(const double factor)</argsstring>
        <name>cleanBelow</name>
        <reimplements refid="classlmx_1_1Data_1a706e90ec786d6133dd69edcbc6b37845">cleanBelow</reimplements>
        <param>
          <type>const double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method for cleaning all elements below a given factor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="173" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="173" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a9147f2967ac55a22a91640297292d240" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::readDataFile</definition>
        <argsstring>(const char *input_file)</argsstring>
        <name>readDataFile</name>
        <reimplements refid="classlmx_1_1Data__vec_1a32d6a9d26eb14ceec99e0ee0b6b33f47">readDataFile</reimplements>
        <param>
          <type>const char *</type>
          <declname>input_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read data method. Opens the file specified and reads the vector&apos;s data in it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to be read. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="193" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="193" bodyend="218"/>
        <references refid="classlmx_1_1Type__stdVector_1a727c040e4adaf13abc799c4fcef971b4" compoundref="lmx__mat__type__stdvector_8h" startline="76" endline="77">lmx::Type_stdVector&lt; T &gt;::resize</references>
        <referencedby refid="classlmx_1_1Type__stdVector_1a8ac268697637315c95a3c39ec482c2ad" compoundref="lmx__mat__type__stdvector_8h" startline="295" endline="298">lmx::Type_stdVector&lt; T &gt;::Type_stdVector</referencedby>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a96f2117b28cbc706f7cefe5ae7ad29e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::writeDataFile</definition>
        <argsstring>(const char *output_file)</argsstring>
        <name>writeDataFile</name>
        <reimplements refid="classlmx_1_1Data__vec_1a2df91dd20f0a882dffe0872110dfeb7f">writeDataFile</reimplements>
        <param>
          <type>const char *</type>
          <declname>output_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write data method. Opens the file specified and writes the vector&apos;s data in it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file to be read. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="225" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="225" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a304e1ed1b42ba622aa92b3308a445e18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <reimplements refid="classlmx_1_1Data_1abab7ff41198c0fab10e2a7d739e47ecb">clear</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear method. Wipes all data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="240" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="240" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a8ee5888fe6b8f8e7225332e51833631c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void lmx::Type_stdVector&lt; T &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <reimplements refid="classlmx_1_1Data_1a2d275a49db8c274e26b1d3bcbc23d964">reset</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="250" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="250" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classlmx_1_1Type__stdVector_1a935f6ffefa138befa766872afa16bba4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt; *</type>
        <definition>std::vector&lt;T&gt;* lmx::Type_stdVector&lt; T &gt;::data_pointer</definition>
        <argsstring>()</argsstring>
        <name>data_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classlmx_1_1Data" kindref="compound">Data</ref> pointer method Gives the direction in memory of (pointer to) the object. <simplesect kind="return"><para>A pointer to the vector&apos;s contents (<ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="261" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" bodystart="261" bodyend="264"/>
        <referencedby refid="classlmx_1_1LinearSystem_1ab5b14b289f951ce4dbd2772579dc7931" compoundref="lmx__linsolvers__system_8h" startline="961" endline="974">lmx::LinearSystem&lt; T &gt;::initSLU</referencedby>
        <referencedby refid="classlmx_1_1LinearSystem_1ac85310aca10575dc1cb27dbd1e38da6b" compoundref="lmx__linsolvers__system_8h" startline="364" endline="376">lmx::LinearSystem&lt; T &gt;::setb</referencedby>
        <referencedby refid="classlmx_1_1LinearSystem_1a38f94cd0e4929869c950cd2bc5a3b55e" compoundref="lmx__linsolvers__system_8h" startline="517" endline="957">lmx::LinearSystem&lt; T &gt;::solveYourself</referencedby>
        <referencedby refid="classlmx_1_1LinearSystem_1a1595022f65961d5cfb5c7c9a9a85ee06" compoundref="lmx__linsolvers__system_8h" startline="425" endline="437">lmx::LinearSystem&lt; T &gt;::subsSolve</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classlmx_1_1Type__stdVector_1aaf433432afb39beb3a3908942731530e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void mat_vec_mult</definition>
        <argsstring>(const Type_csc&lt; T &gt; *, const Type_stdVector&lt; T &gt; *, Type_stdVector&lt; T &gt; *)</argsstring>
        <name>mat_vec_mult</name>
        <param>
          <type>const <ref refid="classlmx_1_1Type__csc" kindref="compound">Type_csc</ref>&lt; T &gt; *</type>
          <defname>matrix_in</defname>
        </param>
        <param>
          <type>const <ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref>&lt; T &gt; *</type>
          <defname>vector_in</defname>
        </param>
        <param>
          <type><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref>&lt; T &gt; *</type>
          <defname>vector_out</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classlmx_1_1Matrix" kindref="compound">Matrix</ref> vector (pre)multiplication, specialized for <ref refid="classlmx_1_1Type__csc" kindref="compound">Type_csc</ref> <ref refid="classlmx_1_1Data__mat" kindref="compound">Data_mat</ref> (matrix) and <ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref> (STL vector) formats. Calculates the product A*b = c using pointers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix_in</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlmx_1_1Type__csc" kindref="compound">Type_csc</ref> *Matrix A. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector_in</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref> *Vector b. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector_out</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref> *Vector c = A*b. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h" line="266" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_data_blas.h" bodystart="184" bodyend="211"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Template class <ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>This class implements the methods defined in virtual class data_mat so the <ref refid="classlmx_1_1Vector" kindref="compound">Vector</ref> type &quot;std::vector&quot; can be used in lmx. For details about the caracteristics of this matrix type, see the STL library manual and code.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>contents</parametername>
</parameternamelist>
<parameterdescription>
<para>Corresponds to a std::vector and it&apos;s the base of the methods implemented for this class.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="author"><para>Daniel Iglesias . </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="487">
        <label>lmx::Data_vec&lt; T &gt;</label>
        <link refid="classlmx_1_1Data__vec"/>
        <childnode refid="488" relation="public-inheritance">
        </childnode>
      </node>
      <node id="486">
        <label>lmx::Type_stdVector&lt; T &gt;</label>
        <link refid="classlmx_1_1Type__stdVector"/>
        <childnode refid="487" relation="public-inheritance">
        </childnode>
      </node>
      <node id="488">
        <label>lmx::Data&lt; T &gt;</label>
        <link refid="classlmx_1_1Data"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="490">
        <label>lmx::Data_vec&lt; T &gt;</label>
        <link refid="classlmx_1_1Data__vec"/>
        <childnode refid="491" relation="public-inheritance">
        </childnode>
      </node>
      <node id="489">
        <label>lmx::Type_stdVector&lt; T &gt;</label>
        <link refid="classlmx_1_1Type__stdVector"/>
        <childnode refid="490" relation="public-inheritance">
        </childnode>
      </node>
      <node id="491">
        <label>lmx::Data&lt; T &gt;</label>
        <link refid="classlmx_1_1Data"/>
      </node>
    </collaborationgraph>
    <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_data_blas.h" line="51" column="1" bodyfile="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_data_blas.h" bodystart="51" bodyend="-1"/>
    <listofallmembers>
      <member refid="classlmx_1_1Type__stdVector_1accae3e1fa0fd9cc7b5968a3bf73034fa" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>add</name></member>
      <member refid="classlmx_1_1Type__stdVector_1ab5efd225785a7c2d358762c3a41044d1" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>addElement</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a85e5d2f3e6c22b833c12c2c9bf45660f" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>cleanBelow</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a304e1ed1b42ba622aa92b3308a445e18" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>clear</name></member>
      <member refid="classlmx_1_1Type__stdVector_1ab9526f0caa59c0247d704a7f677436fd" prot="private" virt="non-virtual"><scope>lmx::Type_stdVector</scope><name>contents</name></member>
      <member refid="classlmx_1_1Data_1a9a0de5654dd527cac01f2dc52df86298" prot="public" virt="non-virtual"><scope>lmx::Type_stdVector</scope><name>Data</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a935f6ffefa138befa766872afa16bba4" prot="public" virt="non-virtual"><scope>lmx::Type_stdVector</scope><name>data_pointer</name></member>
      <member refid="classlmx_1_1Data__vec_1a4df811d60407578d5c83a43030e604f1" prot="public" virt="non-virtual"><scope>lmx::Type_stdVector</scope><name>Data_vec</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a7f24603798a29e4d13c0a9eae926ba04" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>equals</name></member>
      <member refid="classlmx_1_1Type__stdVector_1adbc15d4db8a1f72e044a3250359e18eb" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>getCols</name></member>
      <member refid="classlmx_1_1Type__stdVector_1adbbad4029937203d528c2f267174ea3c" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>getRows</name></member>
      <member refid="classlmx_1_1Type__stdVector_1aaf433432afb39beb3a3908942731530e" prot="public" virt="non-virtual"><scope>lmx::Type_stdVector</scope><name>mat_vec_mult</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a7bc99c10ee6a2905f7705598459f0101" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>multiplyElements</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a026f616e7a626ab3935f90779b06d36e" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>multiplyScalar</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a9147f2967ac55a22a91640297292d240" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>readDataFile</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a9bd94cc0b965732f66f0f55d72b7cd06" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>readElement</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a8ee5888fe6b8f8e7225332e51833631c" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>reset</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a727c040e4adaf13abc799c4fcef971b4" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>resize</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a7b246366659974874a46bf0424b3fd99" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>substract</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a39dd4cbb3292f5319a8915ccf56598e9" prot="public" virt="non-virtual"><scope>lmx::Type_stdVector</scope><name>Type_stdVector</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a74cd5d86073824fc5bd9e7d1b52eeaa7" prot="public" virt="non-virtual"><scope>lmx::Type_stdVector</scope><name>Type_stdVector</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a8ac268697637315c95a3c39ec482c2ad" prot="public" virt="non-virtual"><scope>lmx::Type_stdVector</scope><name>Type_stdVector</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a96f2117b28cbc706f7cefe5ae7ad29e6" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>writeDataFile</name></member>
      <member refid="classlmx_1_1Type__stdVector_1a70b59a584946a3bf78a3bf93e33521f4" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>writeElement</name></member>
      <member refid="classlmx_1_1Data_1a74768723b5fb7c7eb5f26232b61ba02d" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>~Data</name></member>
      <member refid="classlmx_1_1Data__vec_1a956beb5c5795e66ef418d7fabab3f578" prot="public" virt="virtual"><scope>lmx::Type_stdVector</scope><name>~Data_vec</name></member>
      <member refid="classlmx_1_1Type__stdVector_1ae78b26a36d536162d1ba8ea634850d23" prot="public" virt="non-virtual"><scope>lmx::Type_stdVector</scope><name>~Type_stdVector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
