<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="lmx__mat__type__stdvector_8h" kind="file">
    <compoundname>lmx_mat_type_stdvector.h</compoundname>
    <includes local="no">fstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">vector</includes>
    <includes local="no">string.h</includes>
    <includes refid="lmx__mat__data__vec_8h" local="yes">lmx_mat_data_vec.h</includes>
    <includedby refid="lmx__mat__vector_8h" local="yes">src/LMX/lmx_mat_vector.h</includedby>
    <incdepgraph>
      <node id="4436">
        <label>src/LMX/lmx_mat_type_stdvector.h</label>
        <link refid="lmx_mat_type_stdvector.h"/>
        <childnode refid="4437" relation="include">
        </childnode>
        <childnode refid="4438" relation="include">
        </childnode>
        <childnode refid="4439" relation="include">
        </childnode>
        <childnode refid="4440" relation="include">
        </childnode>
        <childnode refid="4441" relation="include">
        </childnode>
        <childnode refid="4442" relation="include">
        </childnode>
      </node>
      <node id="4437">
        <label>fstream</label>
      </node>
      <node id="4442">
        <label>lmx_mat_data_vec.h</label>
        <link refid="lmx__mat__data__vec_8h"/>
        <childnode refid="4443" relation="include">
        </childnode>
      </node>
      <node id="4444">
        <label>lmx_mat_data_blas.h</label>
        <link refid="lmx__mat__data__blas_8h"/>
        <childnode refid="4445" relation="include">
        </childnode>
      </node>
      <node id="4441">
        <label>string.h</label>
      </node>
      <node id="4443">
        <label>lmx_mat_data.h</label>
        <link refid="lmx__mat__data_8h"/>
        <childnode refid="4444" relation="include">
        </childnode>
      </node>
      <node id="4440">
        <label>vector</label>
      </node>
      <node id="4439">
        <label>cstdlib</label>
      </node>
      <node id="4438">
        <label>iostream</label>
      </node>
      <node id="4445">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4463">
        <label>src/cone2.cpp</label>
        <link refid="cone2_8cpp"/>
      </node>
      <node id="4471">
        <label>src/ring.h</label>
        <link refid="ring_8h"/>
        <childnode refid="4472" relation="include">
        </childnode>
      </node>
      <node id="4446">
        <label>src/LMX/lmx_mat_type_stdvector.h</label>
        <link refid="lmx_mat_type_stdvector.h"/>
        <childnode refid="4447" relation="include">
        </childnode>
      </node>
      <node id="4465">
        <label>src/cylinder.cpp</label>
        <link refid="cylinder_8cpp"/>
      </node>
      <node id="4466">
        <label>src/geometry.cpp</label>
        <link refid="geometry_8cpp"/>
      </node>
      <node id="4447">
        <label>src/LMX/lmx_mat_vector.h</label>
        <link refid="lmx__mat__vector_8h"/>
        <childnode refid="4448" relation="include">
        </childnode>
        <childnode refid="4473" relation="include">
        </childnode>
      </node>
      <node id="4460">
        <label>src/simulation.cpp</label>
        <link refid="simulation_8cpp"/>
      </node>
      <node id="4453">
        <label>src/LMX/lmx.h</label>
        <link refid="lmx_8h"/>
        <childnode refid="4454" relation="include">
        </childnode>
      </node>
      <node id="4468">
        <label>src/ogive.cpp</label>
        <link refid="ogive_8cpp"/>
      </node>
      <node id="4473">
        <label>src/LMX/lmx_linsolvers_cg.h</label>
        <link refid="lmx__linsolvers__cg_8h"/>
        <childnode refid="4451" relation="include">
        </childnode>
      </node>
      <node id="4455">
        <label>src/cone.h</label>
        <link refid="cone_8h"/>
        <childnode refid="4456" relation="include">
        </childnode>
        <childnode refid="4457" relation="include">
        </childnode>
        <childnode refid="4458" relation="include">
        </childnode>
      </node>
      <node id="4451">
        <label>src/LMX/lmx_linsolvers_system.h</label>
        <link refid="lmx__linsolvers__system_8h"/>
        <childnode refid="4452" relation="include">
        </childnode>
      </node>
      <node id="4461">
        <label>src/cone2.h</label>
        <link refid="cone2_8h"/>
        <childnode refid="4462" relation="include">
        </childnode>
        <childnode refid="4463" relation="include">
        </childnode>
        <childnode refid="4458" relation="include">
        </childnode>
      </node>
      <node id="4456">
        <label>src/cone.cpp</label>
        <link refid="cone_8cpp"/>
      </node>
      <node id="4464">
        <label>src/cylinder.h</label>
        <link refid="cylinder_8h"/>
        <childnode refid="4465" relation="include">
        </childnode>
        <childnode refid="4458" relation="include">
        </childnode>
      </node>
      <node id="4470">
        <label>src/twoplates.cpp</label>
        <link refid="twoplates_8cpp"/>
      </node>
      <node id="4459">
        <label>src/heatsurf.cpp</label>
        <link refid="heatsurf_8cpp"/>
      </node>
      <node id="4467">
        <label>src/ogive.h</label>
        <link refid="ogive_8h"/>
        <childnode refid="4458" relation="include">
        </childnode>
        <childnode refid="4468" relation="include">
        </childnode>
      </node>
      <node id="4450">
        <label>src/LMX/lmx_mat_dense_matrix.h</label>
        <link refid="lmx__mat__dense__matrix_8h"/>
        <childnode refid="4451" relation="include">
        </childnode>
      </node>
      <node id="4472">
        <label>src/ring.cpp</label>
        <link refid="ring_8cpp"/>
      </node>
      <node id="4462">
        <label>src/cone2-bak.cpp</label>
        <link refid="cone2-bak_8cpp"/>
      </node>
      <node id="4457">
        <label>src/cone2-bak.h</label>
        <link refid="cone2-bak_8h"/>
      </node>
      <node id="4454">
        <label>src/geometry.h</label>
        <link refid="geometry_8h"/>
        <childnode refid="4455" relation="include">
        </childnode>
        <childnode refid="4461" relation="include">
        </childnode>
        <childnode refid="4464" relation="include">
        </childnode>
        <childnode refid="4466" relation="include">
        </childnode>
        <childnode refid="4467" relation="include">
        </childnode>
        <childnode refid="4469" relation="include">
        </childnode>
        <childnode refid="4471" relation="include">
        </childnode>
      </node>
      <node id="4469">
        <label>src/twoplates.h</label>
        <link refid="twoplates_8h"/>
        <childnode refid="4458" relation="include">
        </childnode>
        <childnode refid="4470" relation="include">
        </childnode>
      </node>
      <node id="4458">
        <label>src/simulation.h</label>
        <link refid="simulation_8h"/>
        <childnode refid="4459" relation="include">
        </childnode>
        <childnode refid="4460" relation="include">
        </childnode>
      </node>
      <node id="4448">
        <label>src/LMX/lmx_mat_type_stdmatrix.h</label>
        <link refid="lmx__mat__type__stdmatrix_8h"/>
        <childnode refid="4449" relation="include">
        </childnode>
      </node>
      <node id="4452">
        <label>src/LMX/lmx_linsolvers.h</label>
        <link refid="lmx__linsolvers_8h"/>
        <childnode refid="4453" relation="include">
        </childnode>
      </node>
      <node id="4449">
        <label>src/LMX/lmx_mat_matrix.h</label>
        <link refid="lmx__mat__matrix_8h"/>
        <childnode refid="4450" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classlmx_1_1Type__stdVector" prot="public">lmx::Type_stdVector</innerclass>
    <innernamespace refid="namespacelmx">lmx</innernamespace>
    <briefdescription>
<para>This file contains both the declaration and implementation for type_stdVector (dense vector) class member functions. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Daniel Iglesias </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2005<sp/>by<sp/>Daniel<sp/>Iglesias<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://code.google.com/p/lmx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/>License<sp/>as<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Library<sp/>General<sp/>Public<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/>59<sp/>Temple<sp/>Place<sp/>-<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307,<sp/>USA.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LMXTYPE_STDVECTOR_H</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LMXTYPE_STDVECTOR_H</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include&quot;<ref refid="lmx__mat__data__vec_8h" kindref="compound">lmx_mat_data_vec.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">lmx<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Type_stdVector<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Data_vec&lt;T&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>contents;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="62" refid="classlmx_1_1Type__stdVector_1a39dd4cbb3292f5319a8915ccf56598e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Type__stdVector_1a39dd4cbb3292f5319a8915ccf56598e9" kindref="member">Type_stdVector</ref>(){}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Type__stdVector_1a39dd4cbb3292f5319a8915ccf56598e9" kindref="member">Type_stdVector</ref>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref>,<sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Type__stdVector_1a39dd4cbb3292f5319a8915ccf56598e9" kindref="member">Type_stdVector</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classlmx_1_1Type__stdVector_1ae78b26a36d536162d1ba8ea634850d23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Type__stdVector_1ae78b26a36d536162d1ba8ea634850d23" kindref="member">~Type_stdVector</ref>(){}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classlmx_1_1Type__stdVector_1a727c040e4adaf13abc799c4fcef971b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1a727c040e4adaf13abc799c4fcef971b4" kindref="member">resize</ref>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>mrows,<sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>ncolumns)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>contents.resize(mrows);<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="classlmx_1_1Type__stdVector_1a9bd94cc0b965732f66f0f55d72b7cd06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classlmx_1_1Type__stdVector_1a9bd94cc0b965732f66f0f55d72b7cd06" kindref="member">readElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref>&amp;<sp/>mrows,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref>&amp;<sp/>ncolumns)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="86"><highlight class="keyword"><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contents[mrows];<sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="classlmx_1_1Type__stdVector_1a70b59a584946a3bf78a3bf93e33521f4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1a70b59a584946a3bf78a3bf93e33521f4" kindref="member">writeElement</ref>(T<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref>&amp;<sp/>mrows,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref>&amp;<sp/>ncolumns)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/>{<sp/>contents[mrows]<sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="102" refid="classlmx_1_1Type__stdVector_1ab5efd225785a7c2d358762c3a41044d1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1ab5efd225785a7c2d358762c3a41044d1" kindref="member">addElement</ref>(T<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref>&amp;<sp/>mrows,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref>&amp;<sp/>ncolumns)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/>{<sp/>contents[mrows]<sp/>+=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="108" refid="classlmx_1_1Type__stdVector_1adbbad4029937203d528c2f267174ea3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/><ref refid="classlmx_1_1Type__stdVector_1adbbad4029937203d528c2f267174ea3c" kindref="member">getRows</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="109"><highlight class="keyword"><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contents.size();<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="classlmx_1_1Type__stdVector_1adbc15d4db8a1f72e044a3250359e18eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/><ref refid="classlmx_1_1Type__stdVector_1adbc15d4db8a1f72e044a3250359e18eb" kindref="member">getCols</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="115"><highlight class="keyword"><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classlmx_1_1Type__stdVector_1a7f24603798a29e4d13c0a9eae926ba04" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1a7f24603798a29e4d13c0a9eae926ba04" kindref="member">equals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Data" kindref="compound">Data&lt;T&gt;</ref>*<sp/>vector_in)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>contents<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vector_in)-&gt;contents;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classlmx_1_1Type__stdVector_1accae3e1fa0fd9cc7b5968a3bf73034fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1accae3e1fa0fd9cc7b5968a3bf73034fa" kindref="member">add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Data" kindref="compound">Data&lt;T&gt;</ref>*<sp/>vector_in_1)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>changed<sp/>by<sp/>a<sp/>generalized<sp/>STL<sp/>algorithm...<sp/>when<sp/>I<sp/>find<sp/>the<sp/>best<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GMM</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>gmm::add(static_cast&lt;const<sp/>Type_stdVector*&gt;(vector_in_1)-&gt;contents,<sp/>contents);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;this-&gt;contents.size();<sp/>++i)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;contents[i]<sp/>+=<sp/>static_cast&lt;const<sp/>Type_stdVector*&gt;(vector_in_1)-&gt;contents[i];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="classlmx_1_1Type__stdVector_1a7b246366659974874a46bf0424b3fd99" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1a7b246366659974874a46bf0424b3fd99" kindref="member">substract</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Data" kindref="compound">Data&lt;T&gt;</ref>*<sp/>vector_in_1)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>changed<sp/>by<sp/>a<sp/>generalized<sp/>STL<sp/>algorithm...<sp/>when<sp/>I<sp/>find<sp/>the<sp/>best<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>this-&gt;contents.size();<sp/>++i)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;contents[i]<sp/>-=<sp/>static_cast&lt;const<sp/>Type_stdVector*&gt;(vector_in_1)-&gt;contents[i];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classlmx_1_1Type__stdVector_1a026f616e7a626ab3935f90779b06d36e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1a026f616e7a626ab3935f90779b06d36e" kindref="member">multiplyScalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>scalar)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>changed<sp/>by<sp/>a<sp/>generalized<sp/>STL<sp/>algorithm...<sp/>when<sp/>I<sp/>find<sp/>the<sp/>best<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;contents.size();<sp/>++i)<sp/>contents[i]<sp/>*=<sp/>scalar;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classlmx_1_1Type__stdVector_1a7bc99c10ee6a2905f7705598459f0101" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1a7bc99c10ee6a2905f7705598459f0101" kindref="member">multiplyElements</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Data" kindref="compound">Data&lt;T&gt;</ref>*<sp/>vector_in)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;contents.size();<sp/>++i)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contents[i]<sp/>*=<sp/>vector_in-&gt;<ref refid="classlmx_1_1Data_1a25cffd2f6d220d24e37b37a96205e0be" kindref="member">readElement</ref>(i,1);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="classlmx_1_1Type__stdVector_1a85e5d2f3e6c22b833c12c2c9bf45660f" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1a85e5d2f3e6c22b833c12c2c9bf45660f" kindref="member">cleanBelow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>changed<sp/>by<sp/>a<sp/>generalized<sp/>STL<sp/>algorithm...<sp/>when<sp/>I<sp/>find<sp/>the<sp/>best<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GMM</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gmm::clean(contents,<sp/>factor);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;this-&gt;contents.size();<sp/>++i){</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;contents[i]<sp/>&lt;<sp/>static_cast&lt;T&gt;(factor)<sp/>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;contents[i]<sp/>=<sp/>static_cast&lt;T&gt;(0);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="classlmx_1_1Type__stdVector_1a9147f2967ac55a22a91640297292d240" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1a9147f2967ac55a22a91640297292d240" kindref="member">readDataFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_file)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>file_input(input_file);<sp/></highlight><highlight class="comment">/*<sp/>New<sp/>stream<sp/>for<sp/>reading<sp/>data<sp/>from<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>file_type[100];<sp/></highlight><highlight class="comment">/*<sp/>Array<sp/>for<sp/>storing<sp/>file<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>crap[100];<sp/></highlight><highlight class="comment">/*<sp/>Array<sp/>for<sp/>temporary<sp/>storing<sp/>data<sp/>not<sp/>to<sp/>be<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>temp;<sp/></highlight><highlight class="comment">/*<sp/>Class<sp/>T<sp/>variable<sp/>for<sp/>temporary<sp/>storing<sp/>vector&apos;s<sp/>values.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>rows;<sp/></highlight><highlight class="comment">/*<sp/>Variable<sp/>for<sp/>storing<sp/>number<sp/>of<sp/>rows<sp/>of<sp/>file&apos;s<sp/>vector.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>file_input<sp/>&gt;&gt;<sp/>file_type;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(file_type,</highlight><highlight class="stringliteral">&quot;%%MatrixMarket&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_input.getline(crap,99);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_input<sp/>&gt;&gt;<sp/>rows;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_input.getline(crap,99);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>(rows<sp/>=<sp/>atoi(file_type));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classlmx_1_1Type__stdVector_1a727c040e4adaf13abc799c4fcef971b4" kindref="member">resize</ref>(rows,<sp/>1);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;rows<sp/>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_input<sp/>&gt;&gt;<sp/>temp;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents[i]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="classlmx_1_1Type__stdVector_1a96f2117b28cbc706f7cefe5ae7ad29e6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1a96f2117b28cbc706f7cefe5ae7ad29e6" kindref="member">writeDataFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_file)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>file_output(output_file);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>file_output<sp/>&lt;&lt;<sp/>contents.size()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;contents.size()<sp/>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_output<sp/>&lt;&lt;<sp/>contents[i]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="classlmx_1_1Type__stdVector_1a304e1ed1b42ba622aa92b3308a445e18" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1a304e1ed1b42ba622aa92b3308a445e18" kindref="member">clear</ref>()</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>rows<sp/>=<sp/>contents.size();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>contents.clear();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>contents.resize(rows);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//begin<sp/>JCGO<sp/>18/03/09</highlight></codeline>
<codeline lineno="250" refid="classlmx_1_1Type__stdVector_1a8ee5888fe6b8f8e7225332e51833631c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector_1a8ee5888fe6b8f8e7225332e51833631c" kindref="member">reset</ref>()</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>i=0;<sp/>i&lt;this-&gt;contents.size();<sp/>++i)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;contents[i]<sp/>=<sp/>static_cast&lt;T&gt;(0);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//end<sp/>JCGO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="classlmx_1_1Type__stdVector_1a935f6ffefa138befa766872afa16bba4" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;*<sp/><ref refid="classlmx_1_1Type__stdVector_1a935f6ffefa138befa766872afa16bba4" kindref="member">data_pointer</ref>()</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(this-&gt;contents);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mat_vec_mult&lt;&gt;(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__csc" kindref="compound">Type_csc&lt;T&gt;</ref>*,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector&lt;T&gt;</ref>*,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Type__stdVector" kindref="compound">Type_stdVector&lt;T&gt;</ref>*);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>End<sp/>class<sp/>Type_stdVector<sp/>definitions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementing<sp/>the<sp/>methods<sp/>defined<sp/>previously:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="284" refid="classlmx_1_1Type__stdVector_1a74cd5d86073824fc5bd9e7d1b52eeaa7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlmx_1_1Type__stdVector_1a39dd4cbb3292f5319a8915ccf56598e9" kindref="member">Type_stdVector&lt;T&gt;::Type_stdVector</ref>(<ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>rows,<sp/><ref refid="lmx__mat__data_8h_1a49b489a408a211a90e766329c0732d7b" kindref="member">size_type</ref><sp/>columns)<sp/>:<sp/><ref refid="classlmx_1_1Data__vec" kindref="compound">Data_vec</ref>&lt;T&gt;()</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/>contents.resize(rows);</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="classlmx_1_1Type__stdVector_1a8ac268697637315c95a3c39ec482c2ad" refkind="member"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classlmx_1_1Type__stdVector_1a39dd4cbb3292f5319a8915ccf56598e9" kindref="member">Type_stdVector&lt;T&gt;::Type_stdVector</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_file)<sp/>:<sp/><ref refid="classlmx_1_1Data__vec" kindref="compound">Data_vec</ref>&lt;T&gt;()</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="classlmx_1_1Type__stdVector_1a9147f2967ac55a22a91640297292d240" kindref="member">readDataFile</ref>(input_file);</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lmx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/daniel.iglesias/Projects/HeatSurf/src/LMX/lmx_mat_type_stdvector.h"/>
  </compounddef>
</doxygen>
